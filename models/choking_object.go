// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChokingObject choking object
//
// swagger:model ChokingObject
type ChokingObject struct {

	// brand
	Brand string `json:"brand,omitempty"`

	// choking object Id
	// Required: true
	ChokingObjectID *string `json:"chokingObjectId"`

	// consistency
	Consistency string `json:"consistency,omitempty"`

	// contour
	Contour []string `json:"contour"`

	// impairment
	Impairment string `json:"impairment,omitempty"`

	// ingestion description
	IngestionDescription string `json:"ingestionDescription,omitempty"`

	// largest depth millimeters
	// Example: 2.42
	LargestDepthMillimeters float64 `json:"largestDepthMillimeters,omitempty"`

	// largest length millimeters
	// Example: 2.42
	LargestLengthMillimeters float64 `json:"largestLengthMillimeters,omitempty"`

	// largest width millimeters
	// Example: 2.42
	LargestWidthMillimeters float64 `json:"largestWidthMillimeters,omitempty"`

	// material
	Material string `json:"material,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// object description
	ObjectDescription string `json:"objectDescription,omitempty"`

	// object image urls
	ObjectImageUrls []string `json:"objectImageUrls"`

	// object location
	ObjectLocation string `json:"objectLocation,omitempty"`

	// removal technique
	RemovalTechnique string `json:"removalTechnique,omitempty"`

	// severity
	Severity string `json:"severity,omitempty"`

	// shape
	Shape string `json:"shape,omitempty"`

	// shippable
	Shippable bool `json:"shippable,omitempty"`
}

// Validate validates this choking object
func (m *ChokingObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChokingObjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChokingObject) validateChokingObjectID(formats strfmt.Registry) error {

	if err := validate.Required("chokingObjectId", "body", m.ChokingObjectID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this choking object based on context it is used
func (m *ChokingObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChokingObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChokingObject) UnmarshalBinary(b []byte) error {
	var res ChokingObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
