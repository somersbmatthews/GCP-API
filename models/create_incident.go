// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateIncident create incident
//
// swagger:model CreateIncident
type CreateIncident struct {

	// choking object
	ChokingObject *ChokingObject `json:"chokingObject,omitempty"`

	// date micros
	// Example: 1234.8
	DateMicros float32 `json:"dateMicros,omitempty"`

	// doctor Id
	DoctorID string `json:"doctorId,omitempty"`

	// hospital Id
	HospitalID string `json:"hospitalId,omitempty"`

	// incident Id
	// Required: true
	IncidentID *string `json:"incidentId"`

	// patient age months
	// Example: 12
	PatientAgeMonths int64 `json:"patientAgeMonths,omitempty"`

	// patient gender
	PatientGender string `json:"patientGender,omitempty"`

	// prognosis
	Prognosis string `json:"prognosis,omitempty"`
}

// Validate validates this create incident
func (m *CreateIncident) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChokingObject(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncidentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateIncident) validateChokingObject(formats strfmt.Registry) error {
	if swag.IsZero(m.ChokingObject) { // not required
		return nil
	}

	if m.ChokingObject != nil {
		if err := m.ChokingObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chokingObject")
			}
			return err
		}
	}

	return nil
}

func (m *CreateIncident) validateIncidentID(formats strfmt.Registry) error {

	if err := validate.Required("incidentId", "body", m.IncidentID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create incident based on the context it is used
func (m *CreateIncident) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChokingObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateIncident) contextValidateChokingObject(ctx context.Context, formats strfmt.Registry) error {

	if m.ChokingObject != nil {
		if err := m.ChokingObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chokingObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateIncident) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateIncident) UnmarshalBinary(b []byte) error {
	var res CreateIncident
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
