// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateIncident create incident
//
// swagger:model CreateIncident
type CreateIncident struct {

	// acetic acid
	AceticAcid string `json:"aceticAcid,omitempty"`

	// additional imaging and surgery
	AdditionalImagingAndSurgery string `json:"additionalImagingAndSurgery,omitempty"`

	// anesthesia
	Anesthesia string `json:"anesthesia,omitempty"`

	// anterior photo
	AnteriorPhoto string `json:"anteriorPhoto,omitempty"`

	// battery imprint code
	BatteryImprintCode string `json:"batteryImprintCode,omitempty"`

	// battery location
	BatteryLocation string `json:"batteryLocation,omitempty"`

	// complications
	Complications string `json:"complications,omitempty"`

	// custom magnet type
	CustomMagnetType string `json:"customMagnetType,omitempty"`

	// dimensionality
	Dimensionality string `json:"dimensionality,omitempty"`

	// ease of removal
	EaseOfRemoval string `json:"easeOfRemoval,omitempty"`

	// gender
	Gender string `json:"gender,omitempty"`

	// honey
	Honey string `json:"honey,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// incident description
	IncidentDescription string `json:"incidentDescription,omitempty"`

	// incident year
	IncidentYear string `json:"incidentYear,omitempty"`

	// largest depth
	LargestDepth string `json:"largestDepth,omitempty"`

	// largest length
	LargestLength string `json:"largestLength,omitempty"`

	// largest width
	LargestWidth string `json:"largestWidth,omitempty"`

	// lateral photo
	LateralPhoto string `json:"lateralPhoto,omitempty"`

	// length of hospital stay
	LengthOfHospitalStay string `json:"lengthOfHospitalStay,omitempty"`

	// life threatening
	LifeThreatening string `json:"lifeThreatening,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// location of objects
	LocationOfObjects string `json:"locationOfObjects,omitempty"`

	// longterm prognosis
	LongtermPrognosis string `json:"longtermPrognosis,omitempty"`

	// magnet type
	MagnetType string `json:"magnetType,omitempty"`

	// magnetic pole direction
	MagneticPoleDirection string `json:"magneticPoleDirection,omitempty"`

	// number of objects
	NumberOfObjects string `json:"numberOfObjects,omitempty"`

	// number of pieces
	NumberOfPieces string `json:"numberOfPieces,omitempty"`

	// object basic shape
	ObjectBasicShape string `json:"objectBasicShape,omitempty"`

	// object characteristics
	ObjectCharacteristics string `json:"objectCharacteristics,omitempty"`

	// object consistency
	ObjectConsistency string `json:"objectConsistency,omitempty"`

	// object material
	ObjectMaterial string `json:"objectMaterial,omitempty"`

	// objects intact
	ObjectsIntact string `json:"objectsIntact,omitempty"`

	// other
	Other string `json:"other,omitempty"`

	// other shape
	OtherShape string `json:"otherShape,omitempty"`

	// patient age
	PatientAge string `json:"patientAge,omitempty"`

	// posterior photo
	PosteriorPhoto string `json:"posteriorPhoto,omitempty"`

	// removal strategy
	RemovalStrategy string `json:"removalStrategy,omitempty"`

	// setting of removal
	SettingOfRemoval string `json:"settingOfRemoval,omitempty"`

	// sucralfate
	Sucralfate string `json:"sucralfate,omitempty"`

	// symptom severity
	SymptomSeverity string `json:"symptomSeverity,omitempty"`

	// symptoms present
	SymptomsPresent string `json:"symptomsPresent,omitempty"`

	// time until removal
	TimeUntilRemoval string `json:"timeUntilRemoval,omitempty"`

	// xray opacity
	XrayOpacity string `json:"xrayOpacity,omitempty"`
}

// Validate validates this create incident
func (m *CreateIncident) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateIncident) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create incident based on context it is used
func (m *CreateIncident) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateIncident) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateIncident) UnmarshalBinary(b []byte) error {
	var res CreateIncident
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
