swagger: "2.0"
info:
  description: "This is test server for GIRC app"
  version: "3.0.0"
  title: "GIRC App API"
  # termsOfService: "http://swagger.io/terms/"
 # contact:
   # email: "apiteam@swagger.io"
#  license:
  #  name: "Apache 2.0"
  #  url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: girc.app
basePath: "/"
tags:
- name: "incident"
  description: "to create, update, and delete incidents using old app"
- name: "user"
  description: "for user registration and authentication"
- name: verify
  description: only used for testing and will be removed in production
- name: Medical Expert
  description: for Medical Experts
- name: ENT Incident
  description: for Otolaryngology Incidents
- name: Vet Incident
  description: for Vet Incidents
- name: EMT Incident
  description: for Emergency Medical Technician Incidents
- name: Coroner Incident
  description: for Coroner Incidents
- name: Derm Incident
  description: for Dermatologist Incidents
- name: Surg Incident
  description: for Surgical Incidents

- name: Fire Incident
  description: for fire incidents
- name: ERP Incident
  description: for Emergency Room Physician incidents
#  externalDocs:
 #   description: "Find out more about our store"
 #   url: "http://swagger.io"
schemes:
- "https"
paths:
  /v2/user:
    post:
      tags:
      - "user"
      summary: "register a user"
      description: "register a user with his information"
      operationId: "createUser"
      produces: 
      - "application/json"
      consumes:
      - application/json
      parameters:
      - name: "Authorization"
        in: header
        description: "authorization header contains bearer token"
        type: string
        required: true
      - name: "user"
        in: "body"
        required: true
        description: "a user's information"
        schema:
          $ref: "#/definitions/CreateUser"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GoodResponse"
        "400":
          description: database error while creating user
          schema:
            $ref: "#/definitions/BadResponse"
        "401":
          description: bad authorization token
          schema:
            $ref: "#/definitions/BadResponse"
    get:
      tags:
      - "user"
      summary: "Get user's information."
      description: "Get a user's information."
      operationId: "getUser"
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - name: "Authorization"
        in: "header"
        description: "authorization header contains bearer token"
        type: string
        required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetUserGoodResponse"
        401:
          description: bad authorization token
          schema: 
            $ref: "#/definitions/BadResponse"
        "404":
          description: "user not found"
          schema:
            $ref: "#/definitions/BadResponse"

    delete:
      tags:
      - user
      summary: unregisters a user, for testing only will be removed in production
      description: deletes a user
      operationId: deleteUser
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - name: "Authorization"
        in: header
        description: "authorization token"
        type: string
        required: true
      responses:
        200: 
          description: "successful operation"
          schema:
            $ref: '#/definitions/GoodResponse'
        401:
          description: bad authorization token
          schema:
            $ref: '#/definitions/BadResponse'
        404:
          description: 'user with requested userid not found'
          schema:
            $ref: '#/definitions/BadResponse'
          
  /v2/incident:
    post:
      tags:
      - "incident"
      summary: "Create an incident"
      description: "use this to create an incident for a userId"
      operationId: "createIncident"
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "authorization header contains bearer token"
        type: string
        required: true
      - in: body
        name: incident
        required: true
        schema:
          $ref: "#/definitions/CreateIncidents"
      responses:
        "200":
          description: "successful operation, only returns token if not using OAuth"
          schema:
            $ref: "#/definitions/GoodResponse"
          headers:
            Authentication:
              description: "token"
              type: "string"
        401:
          description: bad authorization token
          schema:
            $ref: "#/definitions/CreateIncidentInvalidIncidentResponse"
        "404":
          description: "userId for this incident is not found"
          schema:
            $ref: "#/definitions/CreateIncidentUserIdNotFoundResponse"
    get:
      tags:
      - "incident"
      summary: "Get incidents"
      description: "Use this to get all incidents created by a user. incidents are listed in array in order from newest to oldest created"
      operationId: "getIncidents"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: Authorization
        description: "authorization header contains bearer token"
        type: string
        required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetIncidentsGoodResponse"
            
        401:
          description: "bad authorization token"
          schema:
            $ref: "#/definitions/BadResponse"
        404:
          description: "userid not found"
          schema:
            $ref:  "#/definitions/BadResponse"
            
    delete:
      tags:
      - "incident"
      summary: "Delete incident"
      description: "Use this to delete an incident by incidentId"
      operationId: "deleteIncidents"
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "authorization header contains bearer token"
        type: string
        required: true
      - in: body
        name: incident
        required: true
        schema:
          $ref: "#/definitions/DeleteIncident"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/GoodResponse"
        401:
          description: bad authorization token
          schema:
            $ref: "#/definitions/BadResponse"
        404:
          description: incident not found
          schema:
            $ref: "#/definitions/BadResponse"
            
  /v3/expert:
    post:
      tags:
        - Medical Expert
      summary: register expert
      description: Use this to register a expert
      operationId: registerExpert
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "if using google oauth, set that token here"
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
    get:
      tags:
        - Medical Expert
      summary: register expert
      description: Use this to register a expert
      operationId: getExpert
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "if using google oauth, set that token here"
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
    patch:
      tags:
        - Medical Expert
      summary: register expert
      description: Use this to register a expert
      operationId: updateExpert
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "if using google oauth, set that token here"
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
    delete:
      tags:
        - Medical Expert
      summary: register expert
      description: Use this to register a expert
      operationId: deleteExpert
      produces:
      - application/json
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "if using google oauth, set that token here"
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
          
  /v3/expert/login:
    get:
      tags:
        - Medical Expert
      summary: login expert
      description: "Use this to delete an incident by incidentId"
      operationId: loginExpert
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "authorization header contains token"
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
        401:
          description: bad authorization token
          schema:
            $ref: "#/definitions/BadResponse"
        404:
          description: incident not found
          schema:
            $ref: "#/definitions/BadResponse"
            
  /v3/expert/logout:
    get:
      tags:
        - Medical Expert
      summary: login expert
      description: "Use this tto login an expert"
      operationId: logoutExpert
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "authorization header contains token"
        type: string
        required: true
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
        401:
          description: bad authorization token
          schema:
            $ref: "#/definitions/BadResponse"
        404:
          description: incident not found
          schema:
            $ref: "#/definitions/BadResponse"
            
  /v3/verify:
    patch:
      tags:
        - "verify"
      summary:  use this to verify or unverify a Medcal Expert, for testing only
      description: "verified field is true to verify, false to unverify"
      operationId: verifyExpert
      produces:
      - "application/json"
      consumes:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "authorization header contains token"
        type: string
        required: true
      - name: verified
        in: body
        description: "verified field is true to verify, false to unverify"
        required: true
        schema:
          $ref: "#/definitions/Verify"
      responses:
          200:
            description: successful operation
            schema:
              $ref: "#/definitions/GoodResponse"
          401:
            description: bad authorization token           
            schema:
              $ref: "#/definitions/BadResponse"
          404:
            description: userid not found
            schema: 
              $ref: "#/definitions/BadResponse"
      
  /v3/entincident:
    post:
      tags:
        - ENT Incident
      summary: create ENT Incident 
      description: "Use this to delete an incident by incidentId"
      operationId: "createENTIncident"
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "authorization header contains bearer token"
        type: string
        required: true
      - in: body
        name: incident
        required: true
        schema:
          $ref: "#/definitions/CreateENTIncident"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/GoodResponse"
        401:
          description: bad authorization token
          schema:
            $ref: "#/definitions/BadResponse"
        404:
          description: incident not found
          schema:
            $ref: "#/definitions/BadResponse"
      
  /v3/emtincident:
    post:
      tags:
        - EMT Incident
      summary: create Emergency Medical Technician Incident 
      description: "Use this to delete an incident by incidentId"
      operationId: "createEMTIncident"
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "authorization header contains bearer token"
        type: string
        required: true
      - in: body
        name: incident
        required: true
        schema:
          $ref: "#/definitions/CreateENTIncident"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
        401:
          description: bad authorization token
          schema:
            $ref: "#/definitions/BadResponse"
        404:
          description: incident not found
          schema:
            $ref: "#/definitions/BadResponse"
      
  /v3/erpincident:
    post:
      tags:
        - ERP Incident
      summary: create create Emergency Room Physician incident
      description: "Use this to delete an incident by incidentId"
      operationId: createERPIncident
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "authorization header contains bearer token"
        type: string
        required: true
      - in: body
        name: incident
        required: true
        schema:
          $ref: "#/definitions/DeleteIncident"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
        401:
          description: bad authorization token
          schema:
            $ref: "#/definitions/BadResponse"
        404:
          description: incident not found
          schema:
            $ref: "#/definitions/BadResponse"
      
  /v3/corincident:
    post:
      tags:
        - Coroner Incident
      summary: create coroner incident
      description: "Use this to delete an incident by incidentId"
      operationId: createCorIncident
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "authorization header contains bearer token"
        type: string
        required: true
      - in: body
        name: incident
        required: true
        schema:
          $ref: "#/definitions/DeleteIncident"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
        401:
          description: bad authorization token
          schema:
            $ref: "#/definitions/BadResponse"
        404:
          description: incident not found
          schema:
            $ref: "#/definitions/BadResponse"
  
  /v3/dermincident:
    post:
      tags:
        - Derm Incident
      summary: create coroner incident
      description: "Use this to delete an incident by incidentId"
      operationId: createDermIncident
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "authorization header contains bearer token"
        type: string
        required: true
      - in: body
        name: incident
        required: true
        schema:
          $ref: "#/definitions/DeleteIncident"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
        401:
          description: bad authorization token
          schema:
            $ref: "#/definitions/BadResponse"
        404:
          description: incident not found
          schema:
            $ref: "#/definitions/BadResponse"
      
  /v3/vetincident:
    post:
      tags:
        - Vet Incident
      description: "Use this to delete an incident by incidentId"
      operationId: createVetIncident
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "authorization header contains bearer token"
        type: string
        required: true
      - in: body
        name: incident
        required: true
        schema:
          $ref: "#/definitions/DeleteIncident"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
        401:
          description: bad authorization token
          schema:
            $ref: "#/definitions/BadResponse"
        404:
          description: incident not found
          schema:
            $ref: "#/definitions/BadResponse"
            
  /v3/surgincident:
    post:
      tags:
        - Surg Incident
      description: "Use this to delete an incident by incidentId"
      operationId: createSurgIncident
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "authorization header contains bearer token"
        type: string
        required: true
      - in: body
        name: incident
        required: true
        schema:
          $ref: "#/definitions/DeleteIncident"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
        401:
          description: bad authorization token
          schema:
            $ref: "#/definitions/BadResponse"
        404:
          description: incident not found
          schema:
            $ref: "#/definitions/BadResponse"
            
  /v3/fireincident:
    post:
      tags:
        - Fire Incident
      description: "Use this to delete an incident by incidentId"
      operationId: createFireIncident
      produces:
      - "application/json"
      consumes:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: "authorization header contains bearer token"
        type: string
        required: true
      - in: body
        name: incident
        required: true
        schema:
          $ref: "#/definitions/DeleteIncident"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
        401:
          description: bad authorization token
          schema:
            $ref: "#/definitions/BadResponse"
        404:
          description: incident not found
          schema:
            $ref: "#/definitions/BadResponse"
            
  
      
definitions:

  


  CreateExpert:
    type: object
    properties:
      Email:
        type: string
      Password:
        type: string
      Expertise:
        type: number
      Degree:
        type: number
      Verified:
        type: boolean
        
  BadResponse:
    type: object
    properties:
      Message:
        type: string
        
  GoodResponse:
    type: object
    properties:
      Message:
        type: string
        
  GetExpertResponse:
    type: object
    properties:
      ID:
        type: string
      Email:
        type: string
      Password:
        type: string
      Expertise:
        type: number
      Degree:
        type: number
      Verified:
        type: boolean
        
  UpdateExpert:
    type: object
    properties:
      Email:
        type: string
      Password:
        type: string
      Expertise:
        type: number
      Degree:
        type: number
        

  CreateENTIncident:
    type: object
    required:
      - ID
    properties:
      Info:
        type: string
      ID:
        type: string
      Date:
        type: integer
      Country:
        type: string
      Prognosis:
        type: integer
      
      RemovalSetting:
        type: integer
      Gender:
        type: integer
      Age: 
        type: integer
      Imaging:
        type: array
        items: 
          type: integer
      CustomImaging:
        type: array
        items:
          type: string
      Procedures:
        type: array
        items: 
          type: integer
      CustomProcedures:
        type: array
        items:
          type: string
      Complications:
        type: array
        items:
          type: integer
      CustomComplications:
        type: array
        items:
          type: string
      SymptomSeverity:
        type: integer
      Symptoms:
        type: array
        items:
          type: integer
      CustomSymptoms:
        type: array
        items:
          type: string
      TimeUntilRemoval:
        type: integer
      Anesthesia:
        type: integer
      SwallowedObjects:
        type: array
        items:
          $ref: "#/definitions/CreateSwallowedObject"
        

      

    
  CreateSwallowedObject:
    type: object
    properties:
      ID: 
        type: string
      IncidentID:
        type: string
      Location:
        type: integer
      Shape:
        type: integer
      CustomShape:
        type: string
      Materials:
        type: array
        items:
          type: integer
      CustomMaterials:
        type: array
        items:
          type: string
      Consistency:
        type: string
      RemovalDifficulty:
        type: integer
      AnteriorPhoto:
        type: string
      PosteriorPhoto:
        type: string
      LaterialPhoto:
        type: string
      LongestWidth:
        type: number
      LongestHeight:
        type: number
      LongestDepth:
        type: number

      
          
  CreateIncidents:
    type: object
    properties:
      userId:
        type: string
      incidents:
        type: array
        items:
          $ref: "#/definitions/Incident" 

    
      
        
# old incident
  Incident:
    type: "object"
    required:
      - id
    properties:
      id: 
        type: string
      location: # 1 /
        type: string
      locationOfObjects: # 2 
        type: string
      longtermPrognosis: # 3 
        type: "string"
      symptomsPresent: # 4
        type: string
      anteriorPhoto: # 6
        type: "string"
      lateralPhoto:
        type: string
      posteriorPhoto:
        type: string
      incidentYear: # 7 /
        type: "string"
      objectConsistency: # 8
        type: "string"
      gender:  # 9 /
        type: "string"
      patientAge: # 10 /
        type: "string"
      largestLength: # 11
        type: "string"
      removalStrategy: # 12
        type: string
      settingOfRemoval: # 13
        type: string
      lengthOfHospitalStay: # 4
        type: string
      lifeThreatening: # 15
        type: string
      incidentDescription: # 16 /
        type: string
      timeUntilRemoval: # 17
        type: string
      easeOfRemoval: # 18
        type: string
      objectMaterial: # 19
        type: string
      objectBasicShape: # 20
        type: string
      anesthesia: # 21
        type: string
      symptomSeverity: # 22
        type: string
      xrayOpacity: #  23
        type: string
      aceticAcid: # 24
        type: string
      other: # 25
        type: string
      dimensionality: # 26
        type: string
      additionalImagingAndSurgery: # 27
        type: string
      numberOfPieces: # 28
        type: string
      objectsIntact: # 29
        type: string
      objectCharacteristics: # 30
        type: string
      batteryLocation: # 31
        type: string
      magneticPoleDirection: # 32
        type: string
      complications: # 33
        type: string
      largestDepth: # 34
        type: string
      sucralfate: # 35
        type: string
      batteryImprintCode: # 36
        type: string
      otherShape: # 37
        type: string
      largestWidth: # 38
        type: string
      magnetType: # 39
        type: string
      numberOfObjects: # 40 /
        type: string 
      customMagnetType: # 41
        type: string
      honey: # 42
        type: string
        
        
      


      
  CreateIncidentGoodResponse:
    type: "object"
    required:
      - ID
    properties:
      ID:
        type: "string"
      UserID:
        type: string
      Long-term_prognosis:
        type: "string"
      What_material_is_the_object_made_of:
        type: "string"
      Anterior: 
        type: "string"
      Date_of_Incident:
        type: "string"
      Object_Consistency:
        type: "string"
      Gender: 
        type: "string"
      Approximate_Patient_Age:
        type: "string"
      Location_of_object:
        type: "string"
      Incident_Description:
        type: "string"
      Largest_Length:
        type: "string"
      Object_Basic_Shape:
        type: "string"
      The_object_is:
        type: "string" 
      Created:
        type: boolean
          
        
     
    
  
  CreateIncidentInvalidIncidentResponse:
    type: "object"
    required:
      - ID
    properties:
      ID:
        type: "string"
      Long-term_prognosis:
        type: "string"
      What_material_is_the_object_made_of:
        type: "string"
      Anterior: 
        type: "string"
      Date_of_Incident:
        type: "string"
      Object_Consistency:
        type: "string"
      Gender: 
        type: "string"
      Approximate_Patient_Age:
        type: "string"
      Location_of_object:
        type: "string"
      Incident_Description:
        type: "string"
      Largest_Length:
        type: "string"
      Object_Basic_Shape:
        type: "string"
      The_object_is:
        type: "string"
      Created:
          type: boolean
          default: false
  
  CreateIncidentUserIdNotFoundResponse:
    type: "object"
    required:
      - ID
    properties:
      ID:
        type: "string"
      Long-term_prognosis:
        type: "string"
      What_material_is_the_object_made_of:
        type: "string"
      Anterior: 
        type: "string"
      Date_of_Incident:
        type: "string"
      Object_Consistency:
        type: "string"
      Gender: 
        type: "string"
      Approximate_Patient_Age:
        type: "string"
      Location_of_object:
        type: "string"
      Incident_Description:
        type: "string"
      Largest_Length:
        type: "string"
      Object_Basic_Shape:
        type: "string"
      The_object_is:
        type: "string" 
      Created:
        type: boolean
        default: false
  
  
  GetIncidentsUserIdNotFoundResponse:
    type: "object"
    required:
      - userId
    properties:
      userId:
        type: string
        
  GetIncidentsBadRequestResponse:
    type: object
    required:
      - userId
    properties:
      userId:
        type: string
        
  GetIncidentsGoodResponse:
    type: "object"
    properties:
      userId:
        type: "string"
      incidents:
        type: array
        items:
          $ref: "#/definitions/Incident"
  
  DeleteIncident:
      type: "object"
      required:
        - ID
      properties:
        ID:
          type: string
          
  DeleteIncidentIncidentIdNotFoundResponse:
      type: "object"
      required:
        - ID
      properties:
        ID:
          type: string
        Deleted:
          type: boolean
          default: true
  
  DeleteIncidentGoodResponse:
      type: "object"
      required:
        - ID
      properties:
        ID:
          type: string
        Deleted:
          type: boolean
          default: true
            
  CreateUser:
    type: object
    required:
      - name
      - email
      - degree
      - specialty
    properties:
      id:
        type: string
      name:
        type: string
      email: 
        type: string
      degree:
        type: string
      specialty:
        type: string
      
  CreateUserGoodResponse:
    type: object
    required:
      - userId
      - created
    properties:
      userId:
        type: string
      name:
        type: string
      email: 
        type: string
      degree:
        type: string
      specialty:
        type: string
      created:
        type: boolean
  
  
  CreateUserBadResponse:
    type: object
    required:
      - created
      - name
      - email
      - specialty
      - degree
    properties:
      name:
        type: string
      email: 
        type: string
      degree:
        type: string
      specialty:
        type: string
      created:
        type: boolean
        example: false
  
  GetUserGoodResponse:
    type: "object"
    required: 
      - userId
      - verified
      - name
      - degree
      - specialty
      - email
    properties:
      userId:
        type: "string"
      name:
        type: "string"
      degree:
        type: "string"
      specialty:
        type: "string"
      email:
        type: "string"
      verified:
        type: "boolean"
        example: false
  GetUserBadResponse:
    type: object
    required:
      - userId
    properties:
      userId:
        type: string

  Verify:
    type: "object"
    required:
      - verified
    properties:
      verified:
        type: "boolean"

  
  DeleteUserGoodResponse:
    type: object
    required:
    - deleted
    properties:
      userId:
        type: string
      deleted:
        type: boolean
        
  DeleteUserBadResponse:
    type: object
    required:
    - userId
    - deleted
    properties:
      userId:
        type: string
      deleted:
        type: boolean
        example: false
        
        
        