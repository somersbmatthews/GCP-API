swagger: "2.0"
info:
  description: "This is test server for GIRC app"
  version: "2.0.0"
  title: "GIRC App API"
  # termsOfService: "http://swagger.io/terms/"
 # contact:
   # email: "apiteam@swagger.io"
#  license:
  #  name: "Apache 2.0"
  #  url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "TODO"
basePath: "/"
tags:
# name: "User"
#  description: "for user registration and authentication"
#  externalDocs:
  #  description: "Find out more"
 #   url: "http://swagger.io"
- name: "incident"
  description: "to create, update, and delete incidents"
- name: "user"
  description: "for user registration and authentication"
#  externalDocs:
 #   description: "Find out more about our store"
 #   url: "http://swagger.io"
schemes:
- "https"
paths:
  /v2/user:register:
    post:
      tags:
      - "user"
      summary: "Create/register unverified user"
      description: "use this to register an unverified user"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user"
        description: "Creates user object and logs him in. Password only required if not creating user via OAuth, If OAuth is used, a token should be in the authorization header."
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation, only returns token if not using OAuth"
          schema:
            $ref: "#/definitions/RegisterUserResponse"
          headers:
            Authentication:
              description: "token"
              type: "string"
  /v2/user:registerandverify:
     post:
      tags:
      - "user"
      summary: "Create/register a verified user ONLY FOR TESTING WILL BE REMOVED IN PRODUCTION"
      description: "use this to register a verified user"
      operationId: "createAndVerifyUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "user"
        description: "Creates user object, verifies him, and logs him in. Password only required if not creating user via OAuth, If OAuth is used, a token should be in the authorization header."
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation, only returns token if not using OAuth"
          schema:
            $ref: "#/definitions/RegisterAndVerifyUserResponse"
          headers:
            Authentication:
              description: "token"
              type: "string"
  /v2/user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: Authorization
        type: string
      - name: "user"
        in: "body"
        description: "If OAuth is used, provide the token in authorization header. If not, provide email and password in the body."
        required: false
        schema: 
          $ref: "#/definitions/Login"
      responses:
        "200":
          description: "successful operation and returns a new refresh token"
          schema:
            $ref: "#/definitions/LoginGoodResponse"
          headers:
            Authorization:
              type: "string"
              description: "token"
#            X-Rate-Limit:
 #             type: "integer"
  #            format: "int32"
   #           description: "calls per hour allowed by the user"
   #         X-Expires-After:
    #          type: "string"
    #          format: "date-time"
     #         description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied or no or bad OAuth token"
          schema:
            $ref: "#/definitions/LoginBadResponse"
          
  /v2/user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session by revoking refresh token"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "authorization header contains refresh token"
        type: string
      responses:
        "200":
          description: "successful operation"
        "404":
          description: "user not logged in"
        
        
  /v2/user:
    get:
      tags:
      - "user"
      summary: "Get user information."
      description: "This can only be done by logged in user, so request needs token in authorization header."
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "authorization header contains refresh token"
        type: string
        required: true
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetUserGoodResponse"
        "404":
          description: "user not logged in"
          schema:
            $ref: "#/definitions/GetUserBadResponse"
          
    put:
      tags:
      - "user"
      summary: "Update user"
      description: "This can only be done by logged in user, so request needs token in authorization header."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "Authorization"
        in: "header"
        description: "authorization header contains refresh token"
        type: string
        required: true
      - name: "user"
        in: "body"
        description: "These values are the updated values, password is optional if using OAuth"
        required: true
        schema:
          $ref: "#/definitions/UpdateUser"
      responses:
        "200":
          description: "successful operation"
          schema: 
            $ref: "#/definitions/UpdateUserGoodResponse"
        "400":
          description: "Invalid user supplied"
          schema:
            $ref: "#/definitions/UpdateUserInvalidResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/UpdateUserNotFoundResponse"
  /v2/incidents:
    post:
      tags:
      - "incident"
      summary: "Create an incident"
      description: "use this to create an incident for a userId"
      operationId: "createIncident"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: Authorization
        description: token
        type: string
        required: true
      - in: "body"
        name: "incident"
        description: "Creates an incident and returns the created incident"
        required: true
        schema:
          $ref: "#/definitions/CreateIncident"
      responses:
        "200":
          description: "successful operation, only returns token if not using OAuth"
          schema:
            $ref: "#/definitions/CreateIncidentGoodResponse"
          headers:
            Authentication:
              description: "token"
              type: "string"
        400:
          description: "invalid incident data"
          schema:
            $ref: "#/definitions/CreateIncidentInvalidIncidentResponse"
        "404":
          description: "userId for this incident is not found"
          schema:
            $ref: "#/definitions/CreateIncidentUserIdNotFoundResponse"
    get:
      tags:
      - "incident"
      summary: "Get incidents"
      description: "Use this to get all incidents for create by a user"
      operationId: "getIncidents"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: Authorization
        description: token
        type: string
        required: true
      - in: "body"
        name: "incident"
        description: "returns the incidents for a userId"
        required: true
        schema:
          $ref: "#/definitions/GetIncidents"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/GetIncidentsGoodResponse"
        404:
          description: "userid not found"
          schema:
            $ref:  "#/definitions/GetIncidentsUserIdNotFoundResponse"
    put:
      tags:
      - "incident"
      summary: "Update incident"
      description: "Use this to update an incident by incidentId"
      operationId: "updateIncidents"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: Authorization
        description: token
        type: string
        required: true
      - in: body
        name: incident
        required: true
        schema:
          $ref: "#/definitions/UpdateIncident"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/UpdateIncidentGoodResponse"
        400:
          description: invalid incident data
          schema:
            $ref: "#/definitions/UpdateIncidentIncidentIdNotFoundResponse"
        404:
          description: incident not found
          schema:
            $ref: "#/definitions/UpdateIncidentIncidentIdNotFoundResponse"
            
    delete:
      tags:
      - "incident"
      summary: "Delete incident"
      description: "Use this to delete an incident by incidentId"
      operationId: "deleteIncidents"
      produces:
      - "application/json"
      parameters:
      - in: header
        name: Authorization
        description: token
        type: string
        required: true
      - in: body
        name: incident
        required: true
        schema:
          $ref: "#/definitions/DeleteIncident"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/DeleteIncidentGoodResponse"
        404:
          description: incident not found
          schema:
            $ref: "#/definitions/DeleteIncidentIncidentIdNotFoundResponse"
      
        
        
    
# securityDefinitions:
 # firebase_auth:
  #  type: "oauth2"
  #  authorizationUrl: "gircapp2.appspot.com"
  #  flow: "implicit"
  #  scopes:
  #    write:pets: "modify pets in your account"
   #   read:pets: "read your pets"
 # api_key:
   # type: "apiKey"
  #  name: "api_key"
  #  in: "header"
definitions:

  CreateIncident:
    type: "object"
    required:
      - incidentId
      - doctorId
    properties:
      incidentId:
        type: "string"
      dateMicros:
        type: "number"
        format: "float"
        example: 1234.8
      doctorId:
        type: "string"
      hospitalId:
        type: "string"
      patientGender:
        type: "string"
      patientAgeMonths:
        type: "integer"
        default: 12
      prognosis:
        type: "string"
      chokingObject:
       $ref: "#/definitions/ChokingObject"
      
  CreateIncidentGoodResponse:
    allOf:
      - $ref: "#/definitions/CreateIncident"
      - type: "object" 
        properties:
          created:
            type: boolean
      
          
        
     
    
  
  CreateIncidentInvalidIncidentResponse:
      allOf:
      - $ref: "#/definitions/CreateIncident"
      - type: "object" 
        properties:
          created:
            type: boolean
            default: false
  
  CreateIncidentUserIdNotFoundResponse:
      allOf:
      - $ref: "#/definitions/CreateIncident"
      - type: "object" 
        properties:
          created:
            type: boolean
            default: false
  
  GetIncidents:
    type: "object"
    required:
      - userId
    properties:
      userId:
        type: string
  
  
  GetIncidentsUserIdNotFoundResponse:
    type: "object"
    required:
      - userId
    properties:
      userId:
        type: string
        
  GetIncidentsGoodResponse:
    type: "object"
    required:
      - userId
    properties:
      userId:
        type: string
      incidents:
        type: array
        items: 
          $ref: "#/definitions/CreateIncident"
          
        
  
  
  UpdateIncident:
    allOf:
    - $ref: "#/definitions/CreateIncident"
    - type: "object"
      properties:
        updated:
          type: boolean
          default: true

  UpdateIncidentGoodResponse:
    allOf:
    - $ref: "#/definitions/CreateIncident"
    - type: "object"
      properties:
        updated:
          type: boolean
          default: true         
  
  
  UpdateIncidentIncidentIdNotFoundResponse:
    allOf:
    - $ref: "#/definitions/CreateIncident"
    - type: "object"
      properties:
        updated:
          type: boolean
          default: false
          
  
  
  
  DeleteIncident:
      type: "object"
      required:
        - incidentId
      properties:
        incidentId:
          type: string
          
  DeleteIncidentIncidentIdNotFoundResponse:
      type: "object"
      required:
        - incidentId
      properties:
        incidentId:
          type: string
        deleted:
          type: boolean
          default: true
  
  DeleteIncidentGoodResponse:
      type: "object"
      required:
        - incidentId
      properties:
        incidentId:
          type: string
        deleted:
          type: boolean
          default: true
  
  ChokingObject:
    type: "object"
    required:
      - chokingObjectId
    properties:
      chokingObjectId:
        type: "string"
      name:
        type: "string"
      shippable:
        type: "boolean"
      brand:
        type: "string"
      shape: 
        type: "string"
      largestLengthMillimeters:
        type: "number"
        format: "double"
        example: 2.42
      largestWidthMillimeters:
        type: "number"
        format: "double"
        example: 2.42
      largestDepthMillimeters:
        type: "number"
        format: "double"
        example: 2.42
      objectDescription:
        type: "string"
      consistency:
        type: "string"
      contour:
        type: "array"
        items:
          type: "string"
          example: 
            - "inside"
            - "outside"
      material:
        type: "string"
      objectLocation:
        type: "string"
      removalTechnique:
        type: "string"
      severity:
        type: "string"
      impairment:
        type: "string"
      ingestionDescription:
        type: "string"
      objectImageUrls:
        type: "array"
        items:
          type: "string"
  
    
  RegisterUserResponse:
    type: "object"
    required: 
      - userId
      - name
      - degree
      - specialty
      - email
    properties:
      userId:
        type: "string"
      name:
        type: "string"
      degree:
        type: "string"
      specialty:
        type: "string"
      email:
        type: "string"
      registered:
        type: "boolean"
      verified:
        type: "boolean"
        default: false
  RegisterAndVerifyUserResponse:
    type: "object"
    required: 
      - userId
      - name
      - degree
      - specialty
      - email
    properties:
      userId:
        type: "string"
      name:
        type: "string"
      degree:
        type: "string"
      specialty:
        type: "string"
      email:
        type: "string"
      registered:
        type: "boolean"
      verified:
        type: "boolean"
  Login:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
  LoginGoodResponse:
    type: "object"
    required: 
      - userId
      - verified
      - name
      - degree
      - specialty
    properties:
      userId:
        type: "string"
      name:
        type: "string"
      degree:
        type: "string"
      specialty:
        type: "string"
      email:
        type: "string"
      registered:
        type: "boolean"
      verified:
        type: "boolean"
        default: false
  UpdateUserGoodResponse:
    type: "object"
    required: 
      - userId
      - verified
      - name
      - degree
      - loggedIn
      - updated
      - email
      - specialty
    properties:
      userId:
        type: "string"
      name:
        type: "string"
      degree:
        type: "string"
      specialty:
        type: "string"
      email:
        type: "string"
      loggedIn:
        type: "boolean"
      verified:
        type: "boolean"
        default: false
      updated:
        type: "boolean"
  UpdateUser:
    type: "object"
    required: 
      - userId
      - name
      - degree
      - specialty
      - email
    properties:
      userId:
        type: "string"
      name:
        type: "string"
      degree:
        type: "string"
      specialty:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
  UpdateUserInvalidResponse:
    type: "object"
    required: 
      - userId
      - verified
      - name
      - degree
      - specialty
      - updated
      - email
    properties:
      userId:
        type: "string"
      name:
        type: "string"
      degree:
        type: "string"
      specialty:
        type: "string"
      email:
        type: "string"
      verified:
        type: "boolean"
        default: false
      updated:
        type: "boolean"
        default: false
  UpdateUserNotFoundResponse:
    type: "object"
    required: 
      - userId
      - verified
      - name
      - degree
      - specialty
      - loggedIn
      - updated
      - email
    properties:
      userId:
        type: "string"
      name:
        type: "string"
      degree:
        type: "string"
      specialty:
        type: "string"
      email:
        type: "string"
      loggedIn:
        type: "boolean"
        default: false
      verified:
        type: "boolean"
        default: false
      updated:
        type: "boolean"
        default: false
  GetUserGoodResponse:
    type: "object"
    required: 
      - userId
      - verified
      - name
      - degree
      - specialty
      - email
    properties:
      userId:
        type: "string"
      name:
        type: "string"
      degree:
        type: "string"
      specialty:
        type: "string"
      email:
        type: "string"
      verified:
        type: "boolean"
        default: false
  GetUserBadResponse:
    type: "object"
    required: 
      - loggedIn
    properties:
      loggedIn:
        type: "boolean"
        default: false
  LoginBadResponse:
    type: "object"
    required: 
      - registered
    properties:
      registered:
        type: "boolean"
        default: false

  User:
    type: "object"
    required: 
      - userId
      - name
      - degree
      - specialty
    properties:
      userId:
        type: "string"
      name:
        type: "string"
      degree:
        type: "string"
      specialty:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
#externalDocs:
#  description: "Find out more about Swagger"
#  url: "http://swagger.io"