// Code generated by go-swagger; DO NOT EDIT.

package fire_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateFireIncidentHandlerFunc turns a function with the right signature into a create fire incident handler
type CreateFireIncidentHandlerFunc func(CreateFireIncidentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateFireIncidentHandlerFunc) Handle(params CreateFireIncidentParams) middleware.Responder {
	return fn(params)
}

// CreateFireIncidentHandler interface for that can handle valid create fire incident params
type CreateFireIncidentHandler interface {
	Handle(CreateFireIncidentParams) middleware.Responder
}

// NewCreateFireIncident creates a new http.Handler for the create fire incident operation
func NewCreateFireIncident(ctx *middleware.Context, handler CreateFireIncidentHandler) *CreateFireIncident {
	return &CreateFireIncident{Context: ctx, Handler: handler}
}

/* CreateFireIncident swagger:route POST /v3/fireincident Fire Incident createFireIncident

Use this to delete an incident by incidentId

*/
type CreateFireIncident struct {
	Context *middleware.Context
	Handler CreateFireIncidentHandler
}

func (o *CreateFireIncident) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateFireIncidentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
