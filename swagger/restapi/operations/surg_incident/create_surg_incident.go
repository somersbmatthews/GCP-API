// Code generated by go-swagger; DO NOT EDIT.

package surg_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateSurgIncidentHandlerFunc turns a function with the right signature into a create surg incident handler
type CreateSurgIncidentHandlerFunc func(CreateSurgIncidentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateSurgIncidentHandlerFunc) Handle(params CreateSurgIncidentParams) middleware.Responder {
	return fn(params)
}

// CreateSurgIncidentHandler interface for that can handle valid create surg incident params
type CreateSurgIncidentHandler interface {
	Handle(CreateSurgIncidentParams) middleware.Responder
}

// NewCreateSurgIncident creates a new http.Handler for the create surg incident operation
func NewCreateSurgIncident(ctx *middleware.Context, handler CreateSurgIncidentHandler) *CreateSurgIncident {
	return &CreateSurgIncident{Context: ctx, Handler: handler}
}

/* CreateSurgIncident swagger:route POST /v3/surgincident Surg Incident createSurgIncident

Use this to delete an incident by incidentId

*/
type CreateSurgIncident struct {
	Context *middleware.Context
	Handler CreateSurgIncidentHandler
}

func (o *CreateSurgIncident) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateSurgIncidentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
