// Code generated by go-swagger; DO NOT EDIT.

package e_m_t_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gircapp/api/swagger/models"
)

// CreateEMTIncidentOKCode is the HTTP code returned for type CreateEMTIncidentOK
const CreateEMTIncidentOKCode int = 200

/*CreateEMTIncidentOK successful operation

swagger:response createEMTIncidentOK
*/
type CreateEMTIncidentOK struct {

	/*
	  In: Body
	*/
	Payload *models.DeleteIncidentGoodResponse `json:"body,omitempty"`
}

// NewCreateEMTIncidentOK creates CreateEMTIncidentOK with default headers values
func NewCreateEMTIncidentOK() *CreateEMTIncidentOK {

	return &CreateEMTIncidentOK{}
}

// WithPayload adds the payload to the create e m t incident o k response
func (o *CreateEMTIncidentOK) WithPayload(payload *models.DeleteIncidentGoodResponse) *CreateEMTIncidentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create e m t incident o k response
func (o *CreateEMTIncidentOK) SetPayload(payload *models.DeleteIncidentGoodResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateEMTIncidentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateEMTIncidentUnauthorizedCode is the HTTP code returned for type CreateEMTIncidentUnauthorized
const CreateEMTIncidentUnauthorizedCode int = 401

/*CreateEMTIncidentUnauthorized bad authorization token

swagger:response createEMTIncidentUnauthorized
*/
type CreateEMTIncidentUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.UpdateIncidentIncidentIDNotFoundResponse `json:"body,omitempty"`
}

// NewCreateEMTIncidentUnauthorized creates CreateEMTIncidentUnauthorized with default headers values
func NewCreateEMTIncidentUnauthorized() *CreateEMTIncidentUnauthorized {

	return &CreateEMTIncidentUnauthorized{}
}

// WithPayload adds the payload to the create e m t incident unauthorized response
func (o *CreateEMTIncidentUnauthorized) WithPayload(payload *models.UpdateIncidentIncidentIDNotFoundResponse) *CreateEMTIncidentUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create e m t incident unauthorized response
func (o *CreateEMTIncidentUnauthorized) SetPayload(payload *models.UpdateIncidentIncidentIDNotFoundResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateEMTIncidentUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateEMTIncidentNotFoundCode is the HTTP code returned for type CreateEMTIncidentNotFound
const CreateEMTIncidentNotFoundCode int = 404

/*CreateEMTIncidentNotFound incident not found

swagger:response createEMTIncidentNotFound
*/
type CreateEMTIncidentNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.DeleteIncidentIncidentIDNotFoundResponse `json:"body,omitempty"`
}

// NewCreateEMTIncidentNotFound creates CreateEMTIncidentNotFound with default headers values
func NewCreateEMTIncidentNotFound() *CreateEMTIncidentNotFound {

	return &CreateEMTIncidentNotFound{}
}

// WithPayload adds the payload to the create e m t incident not found response
func (o *CreateEMTIncidentNotFound) WithPayload(payload *models.DeleteIncidentIncidentIDNotFoundResponse) *CreateEMTIncidentNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create e m t incident not found response
func (o *CreateEMTIncidentNotFound) SetPayload(payload *models.DeleteIncidentIncidentIDNotFoundResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateEMTIncidentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
