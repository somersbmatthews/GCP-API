// Code generated by go-swagger; DO NOT EDIT.

package e_m_t_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateEMTIncidentHandlerFunc turns a function with the right signature into a create e m t incident handler
type CreateEMTIncidentHandlerFunc func(CreateEMTIncidentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateEMTIncidentHandlerFunc) Handle(params CreateEMTIncidentParams) middleware.Responder {
	return fn(params)
}

// CreateEMTIncidentHandler interface for that can handle valid create e m t incident params
type CreateEMTIncidentHandler interface {
	Handle(CreateEMTIncidentParams) middleware.Responder
}

// NewCreateEMTIncident creates a new http.Handler for the create e m t incident operation
func NewCreateEMTIncident(ctx *middleware.Context, handler CreateEMTIncidentHandler) *CreateEMTIncident {
	return &CreateEMTIncident{Context: ctx, Handler: handler}
}

/* CreateEMTIncident swagger:route POST /v3/emtincident EMT Incident createEMTIncident

create Emergency Medical Technician Incident

Use this to delete an incident by incidentId

*/
type CreateEMTIncident struct {
	Context *middleware.Context
	Handler CreateEMTIncidentHandler
}

func (o *CreateEMTIncident) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateEMTIncidentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
