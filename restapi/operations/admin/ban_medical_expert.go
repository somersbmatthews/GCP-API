// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// BanMedicalExpertHandlerFunc turns a function with the right signature into a ban medical expert handler
type BanMedicalExpertHandlerFunc func(BanMedicalExpertParams) middleware.Responder

// Handle executing the request and returning a response
func (fn BanMedicalExpertHandlerFunc) Handle(params BanMedicalExpertParams) middleware.Responder {
	return fn(params)
}

// BanMedicalExpertHandler interface for that can handle valid ban medical expert params
type BanMedicalExpertHandler interface {
	Handle(BanMedicalExpertParams) middleware.Responder
}

// NewBanMedicalExpert creates a new http.Handler for the ban medical expert operation
func NewBanMedicalExpert(ctx *middleware.Context, handler BanMedicalExpertHandler) *BanMedicalExpert {
	return &BanMedicalExpert{Context: ctx, Handler: handler}
}

/* BanMedicalExpert swagger:route PATCH /v3/admin/ban Admin banMedicalExpert

Ban Medical Expert

Use this to ban a medical expert.

*/
type BanMedicalExpert struct {
	Context *middleware.Context
	Handler BanMedicalExpertHandler
}

func (o *BanMedicalExpert) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewBanMedicalExpertParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
