// Code generated by go-swagger; DO NOT EDIT.

package medical_expert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateFCMtokenHandlerFunc turns a function with the right signature into a update f c mtoken handler
type UpdateFCMtokenHandlerFunc func(UpdateFCMtokenParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateFCMtokenHandlerFunc) Handle(params UpdateFCMtokenParams) middleware.Responder {
	return fn(params)
}

// UpdateFCMtokenHandler interface for that can handle valid update f c mtoken params
type UpdateFCMtokenHandler interface {
	Handle(UpdateFCMtokenParams) middleware.Responder
}

// NewUpdateFCMtoken creates a new http.Handler for the update f c mtoken operation
func NewUpdateFCMtoken(ctx *middleware.Context, handler UpdateFCMtokenHandler) *UpdateFCMtoken {
	return &UpdateFCMtoken{Context: ctx, Handler: handler}
}

/* UpdateFCMtoken swagger:route PATCH /v3/expert/updatefcmtoken Medical Expert updateFCMtoken

Update FCM Token

use this to update FCM token

*/
type UpdateFCMtoken struct {
	Context *middleware.Context
	Handler UpdateFCMtokenHandler
}

func (o *UpdateFCMtoken) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateFCMtokenParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
