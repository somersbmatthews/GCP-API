// Code generated by go-swagger; DO NOT EDIT.

package medical_expert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateExpertHandlerFunc turns a function with the right signature into a create expert handler
type CreateExpertHandlerFunc func(CreateExpertParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateExpertHandlerFunc) Handle(params CreateExpertParams) middleware.Responder {
	return fn(params)
}

// CreateExpertHandler interface for that can handle valid create expert params
type CreateExpertHandler interface {
	Handle(CreateExpertParams) middleware.Responder
}

// NewCreateExpert creates a new http.Handler for the create expert operation
func NewCreateExpert(ctx *middleware.Context, handler CreateExpertHandler) *CreateExpert {
	return &CreateExpert{Context: ctx, Handler: handler}
}

/* CreateExpert swagger:route POST /v3/expert/register Medical Expert createExpert

Register a Medical Expert

use this to register/create a user

*/
type CreateExpert struct {
	Context *middleware.Context
	Handler CreateExpertHandler
}

func (o *CreateExpert) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateExpertParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
