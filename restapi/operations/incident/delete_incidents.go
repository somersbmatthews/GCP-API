// Code generated by go-swagger; DO NOT EDIT.

package incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteIncidentsHandlerFunc turns a function with the right signature into a delete incidents handler
type DeleteIncidentsHandlerFunc func(DeleteIncidentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteIncidentsHandlerFunc) Handle(params DeleteIncidentsParams) middleware.Responder {
	return fn(params)
}

// DeleteIncidentsHandler interface for that can handle valid delete incidents params
type DeleteIncidentsHandler interface {
	Handle(DeleteIncidentsParams) middleware.Responder
}

// NewDeleteIncidents creates a new http.Handler for the delete incidents operation
func NewDeleteIncidents(ctx *middleware.Context, handler DeleteIncidentsHandler) *DeleteIncidents {
	return &DeleteIncidents{Context: ctx, Handler: handler}
}

/* DeleteIncidents swagger:route DELETE /v2/incident incident deleteIncidents

Delete incident

Use this to delete an incident by incidentId

*/
type DeleteIncidents struct {
	Context *middleware.Context
	Handler DeleteIncidentsHandler
}

func (o *DeleteIncidents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteIncidentsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
