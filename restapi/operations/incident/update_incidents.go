// Code generated by go-swagger; DO NOT EDIT.

package incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateIncidentsHandlerFunc turns a function with the right signature into a update incidents handler
type UpdateIncidentsHandlerFunc func(UpdateIncidentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateIncidentsHandlerFunc) Handle(params UpdateIncidentsParams) middleware.Responder {
	return fn(params)
}

// UpdateIncidentsHandler interface for that can handle valid update incidents params
type UpdateIncidentsHandler interface {
	Handle(UpdateIncidentsParams) middleware.Responder
}

// NewUpdateIncidents creates a new http.Handler for the update incidents operation
func NewUpdateIncidents(ctx *middleware.Context, handler UpdateIncidentsHandler) *UpdateIncidents {
	return &UpdateIncidents{Context: ctx, Handler: handler}
}

/* UpdateIncidents swagger:route PATCH /v2/incident incident updateIncidents

Update incident

Use this to update an incident by incidentId. Only fields with non-empty strings are updated. If a field is not to be updated, set the value to equal an empty string

*/
type UpdateIncidents struct {
	Context *middleware.Context
	Handler UpdateIncidentsHandler
}

func (o *UpdateIncidents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateIncidentsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
