// Code generated by go-swagger; DO NOT EDIT.

package incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/somersbmatthews/gircapp2/models"
)

// CreateIncidentOKCode is the HTTP code returned for type CreateIncidentOK
const CreateIncidentOKCode int = 200

/*CreateIncidentOK successful operation, only returns token if not using OAuth

swagger:response createIncidentOK
*/
type CreateIncidentOK struct {
	/*token

	 */
	Authentication string `json:"Authentication"`

	/*
	  In: Body
	*/
	Payload *models.CreateIncidentGoodResponse `json:"body,omitempty"`
}

// NewCreateIncidentOK creates CreateIncidentOK with default headers values
func NewCreateIncidentOK() *CreateIncidentOK {

	return &CreateIncidentOK{}
}

// WithAuthentication adds the authentication to the create incident o k response
func (o *CreateIncidentOK) WithAuthentication(authentication string) *CreateIncidentOK {
	o.Authentication = authentication
	return o
}

// SetAuthentication sets the authentication to the create incident o k response
func (o *CreateIncidentOK) SetAuthentication(authentication string) {
	o.Authentication = authentication
}

// WithPayload adds the payload to the create incident o k response
func (o *CreateIncidentOK) WithPayload(payload *models.CreateIncidentGoodResponse) *CreateIncidentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create incident o k response
func (o *CreateIncidentOK) SetPayload(payload *models.CreateIncidentGoodResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateIncidentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header Authentication

	authentication := o.Authentication
	if authentication != "" {
		rw.Header().Set("Authentication", authentication)
	}

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateIncidentBadRequestCode is the HTTP code returned for type CreateIncidentBadRequest
const CreateIncidentBadRequestCode int = 400

/*CreateIncidentBadRequest invalid incident data

swagger:response createIncidentBadRequest
*/
type CreateIncidentBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.CreateIncidentInvalidIncidentResponse `json:"body,omitempty"`
}

// NewCreateIncidentBadRequest creates CreateIncidentBadRequest with default headers values
func NewCreateIncidentBadRequest() *CreateIncidentBadRequest {

	return &CreateIncidentBadRequest{}
}

// WithPayload adds the payload to the create incident bad request response
func (o *CreateIncidentBadRequest) WithPayload(payload *models.CreateIncidentInvalidIncidentResponse) *CreateIncidentBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create incident bad request response
func (o *CreateIncidentBadRequest) SetPayload(payload *models.CreateIncidentInvalidIncidentResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateIncidentBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateIncidentNotFoundCode is the HTTP code returned for type CreateIncidentNotFound
const CreateIncidentNotFoundCode int = 404

/*CreateIncidentNotFound userId for this incident is not found

swagger:response createIncidentNotFound
*/
type CreateIncidentNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.CreateIncidentUserIDNotFoundResponse `json:"body,omitempty"`
}

// NewCreateIncidentNotFound creates CreateIncidentNotFound with default headers values
func NewCreateIncidentNotFound() *CreateIncidentNotFound {

	return &CreateIncidentNotFound{}
}

// WithPayload adds the payload to the create incident not found response
func (o *CreateIncidentNotFound) WithPayload(payload *models.CreateIncidentUserIDNotFoundResponse) *CreateIncidentNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create incident not found response
func (o *CreateIncidentNotFound) SetPayload(payload *models.CreateIncidentUserIDNotFoundResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateIncidentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
