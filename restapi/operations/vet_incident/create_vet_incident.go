// Code generated by go-swagger; DO NOT EDIT.

package vet_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateVetIncidentHandlerFunc turns a function with the right signature into a create vet incident handler
type CreateVetIncidentHandlerFunc func(CreateVetIncidentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateVetIncidentHandlerFunc) Handle(params CreateVetIncidentParams) middleware.Responder {
	return fn(params)
}

// CreateVetIncidentHandler interface for that can handle valid create vet incident params
type CreateVetIncidentHandler interface {
	Handle(CreateVetIncidentParams) middleware.Responder
}

// NewCreateVetIncident creates a new http.Handler for the create vet incident operation
func NewCreateVetIncident(ctx *middleware.Context, handler CreateVetIncidentHandler) *CreateVetIncident {
	return &CreateVetIncident{Context: ctx, Handler: handler}
}

/* CreateVetIncident swagger:route POST /v3/vetincident Vet Incident createVetIncident

Use this to delete an incident by incidentId

*/
type CreateVetIncident struct {
	Context *middleware.Context
	Handler CreateVetIncidentHandler
}

func (o *CreateVetIncident) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateVetIncidentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
