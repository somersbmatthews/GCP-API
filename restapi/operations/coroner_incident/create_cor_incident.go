// Code generated by go-swagger; DO NOT EDIT.

package coroner_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateCorIncidentHandlerFunc turns a function with the right signature into a create cor incident handler
type CreateCorIncidentHandlerFunc func(CreateCorIncidentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCorIncidentHandlerFunc) Handle(params CreateCorIncidentParams) middleware.Responder {
	return fn(params)
}

// CreateCorIncidentHandler interface for that can handle valid create cor incident params
type CreateCorIncidentHandler interface {
	Handle(CreateCorIncidentParams) middleware.Responder
}

// NewCreateCorIncident creates a new http.Handler for the create cor incident operation
func NewCreateCorIncident(ctx *middleware.Context, handler CreateCorIncidentHandler) *CreateCorIncident {
	return &CreateCorIncident{Context: ctx, Handler: handler}
}

/* CreateCorIncident swagger:route POST /v3/corincident Coroner Incident createCorIncident

create coroner incident

Use this to delete an incident by incidentId

*/
type CreateCorIncident struct {
	Context *middleware.Context
	Handler CreateCorIncidentHandler
}

func (o *CreateCorIncident) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateCorIncidentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
