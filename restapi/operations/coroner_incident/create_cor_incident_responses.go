// Code generated by go-swagger; DO NOT EDIT.

package coroner_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gircapp/api/models"
)

// CreateCorIncidentOKCode is the HTTP code returned for type CreateCorIncidentOK
const CreateCorIncidentOKCode int = 200

/*CreateCorIncidentOK successful operation

swagger:response createCorIncidentOK
*/
type CreateCorIncidentOK struct {

	/*
	  In: Body
	*/
	Payload *models.DeleteIncidentGoodResponse `json:"body,omitempty"`
}

// NewCreateCorIncidentOK creates CreateCorIncidentOK with default headers values
func NewCreateCorIncidentOK() *CreateCorIncidentOK {

	return &CreateCorIncidentOK{}
}

// WithPayload adds the payload to the create cor incident o k response
func (o *CreateCorIncidentOK) WithPayload(payload *models.DeleteIncidentGoodResponse) *CreateCorIncidentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create cor incident o k response
func (o *CreateCorIncidentOK) SetPayload(payload *models.DeleteIncidentGoodResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateCorIncidentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateCorIncidentUnauthorizedCode is the HTTP code returned for type CreateCorIncidentUnauthorized
const CreateCorIncidentUnauthorizedCode int = 401

/*CreateCorIncidentUnauthorized bad authorization token

swagger:response createCorIncidentUnauthorized
*/
type CreateCorIncidentUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.BadResponse `json:"body,omitempty"`
}

// NewCreateCorIncidentUnauthorized creates CreateCorIncidentUnauthorized with default headers values
func NewCreateCorIncidentUnauthorized() *CreateCorIncidentUnauthorized {

	return &CreateCorIncidentUnauthorized{}
}

// WithPayload adds the payload to the create cor incident unauthorized response
func (o *CreateCorIncidentUnauthorized) WithPayload(payload *models.BadResponse) *CreateCorIncidentUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create cor incident unauthorized response
func (o *CreateCorIncidentUnauthorized) SetPayload(payload *models.BadResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateCorIncidentUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateCorIncidentNotFoundCode is the HTTP code returned for type CreateCorIncidentNotFound
const CreateCorIncidentNotFoundCode int = 404

/*CreateCorIncidentNotFound incident not found

swagger:response createCorIncidentNotFound
*/
type CreateCorIncidentNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.BadResponse `json:"body,omitempty"`
}

// NewCreateCorIncidentNotFound creates CreateCorIncidentNotFound with default headers values
func NewCreateCorIncidentNotFound() *CreateCorIncidentNotFound {

	return &CreateCorIncidentNotFound{}
}

// WithPayload adds the payload to the create cor incident not found response
func (o *CreateCorIncidentNotFound) WithPayload(payload *models.BadResponse) *CreateCorIncidentNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create cor incident not found response
func (o *CreateCorIncidentNotFound) SetPayload(payload *models.BadResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateCorIncidentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
