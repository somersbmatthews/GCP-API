// Code generated by go-swagger; DO NOT EDIT.

package derm_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateDermIncidentHandlerFunc turns a function with the right signature into a create derm incident handler
type CreateDermIncidentHandlerFunc func(CreateDermIncidentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateDermIncidentHandlerFunc) Handle(params CreateDermIncidentParams) middleware.Responder {
	return fn(params)
}

// CreateDermIncidentHandler interface for that can handle valid create derm incident params
type CreateDermIncidentHandler interface {
	Handle(CreateDermIncidentParams) middleware.Responder
}

// NewCreateDermIncident creates a new http.Handler for the create derm incident operation
func NewCreateDermIncident(ctx *middleware.Context, handler CreateDermIncidentHandler) *CreateDermIncident {
	return &CreateDermIncident{Context: ctx, Handler: handler}
}

/* CreateDermIncident swagger:route POST /v3/dermincident Derm Incident createDermIncident

create coroner incident

Use this to delete an incident by incidentId

*/
type CreateDermIncident struct {
	Context *middleware.Context
	Handler CreateDermIncidentHandler
}

func (o *CreateDermIncident) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateDermIncidentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
