// Code generated by go-swagger; DO NOT EDIT.

package swallowed_object

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gircapp/api/models"
)

// DeleteSwallowedObjectOKCode is the HTTP code returned for type DeleteSwallowedObjectOK
const DeleteSwallowedObjectOKCode int = 200

/*DeleteSwallowedObjectOK successful operation

swagger:response deleteSwallowedObjectOK
*/
type DeleteSwallowedObjectOK struct {

	/*
	  In: Body
	*/
	Payload *models.GoodResponse `json:"body,omitempty"`
}

// NewDeleteSwallowedObjectOK creates DeleteSwallowedObjectOK with default headers values
func NewDeleteSwallowedObjectOK() *DeleteSwallowedObjectOK {

	return &DeleteSwallowedObjectOK{}
}

// WithPayload adds the payload to the delete swallowed object o k response
func (o *DeleteSwallowedObjectOK) WithPayload(payload *models.GoodResponse) *DeleteSwallowedObjectOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete swallowed object o k response
func (o *DeleteSwallowedObjectOK) SetPayload(payload *models.GoodResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteSwallowedObjectOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteSwallowedObjectUnauthorizedCode is the HTTP code returned for type DeleteSwallowedObjectUnauthorized
const DeleteSwallowedObjectUnauthorizedCode int = 401

/*DeleteSwallowedObjectUnauthorized bad authorization token

swagger:response deleteSwallowedObjectUnauthorized
*/
type DeleteSwallowedObjectUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.BadResponse `json:"body,omitempty"`
}

// NewDeleteSwallowedObjectUnauthorized creates DeleteSwallowedObjectUnauthorized with default headers values
func NewDeleteSwallowedObjectUnauthorized() *DeleteSwallowedObjectUnauthorized {

	return &DeleteSwallowedObjectUnauthorized{}
}

// WithPayload adds the payload to the delete swallowed object unauthorized response
func (o *DeleteSwallowedObjectUnauthorized) WithPayload(payload *models.BadResponse) *DeleteSwallowedObjectUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete swallowed object unauthorized response
func (o *DeleteSwallowedObjectUnauthorized) SetPayload(payload *models.BadResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteSwallowedObjectUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteSwallowedObjectNotFoundCode is the HTTP code returned for type DeleteSwallowedObjectNotFound
const DeleteSwallowedObjectNotFoundCode int = 404

/*DeleteSwallowedObjectNotFound incident not found

swagger:response deleteSwallowedObjectNotFound
*/
type DeleteSwallowedObjectNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.BadResponse `json:"body,omitempty"`
}

// NewDeleteSwallowedObjectNotFound creates DeleteSwallowedObjectNotFound with default headers values
func NewDeleteSwallowedObjectNotFound() *DeleteSwallowedObjectNotFound {

	return &DeleteSwallowedObjectNotFound{}
}

// WithPayload adds the payload to the delete swallowed object not found response
func (o *DeleteSwallowedObjectNotFound) WithPayload(payload *models.BadResponse) *DeleteSwallowedObjectNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete swallowed object not found response
func (o *DeleteSwallowedObjectNotFound) SetPayload(payload *models.BadResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteSwallowedObjectNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
