// Code generated by go-swagger; DO NOT EDIT.

package e_n_t_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// UpdateENTIncidentHandlerFunc turns a function with the right signature into a update e n t incident handler
type UpdateENTIncidentHandlerFunc func(UpdateENTIncidentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateENTIncidentHandlerFunc) Handle(params UpdateENTIncidentParams) middleware.Responder {
	return fn(params)
}

// UpdateENTIncidentHandler interface for that can handle valid update e n t incident params
type UpdateENTIncidentHandler interface {
	Handle(UpdateENTIncidentParams) middleware.Responder
}

// NewUpdateENTIncident creates a new http.Handler for the update e n t incident operation
func NewUpdateENTIncident(ctx *middleware.Context, handler UpdateENTIncidentHandler) *UpdateENTIncident {
	return &UpdateENTIncident{Context: ctx, Handler: handler}
}

/* UpdateENTIncident swagger:route PUT /v3/entincident ENT Incident updateENTIncident

update ENT Incident

Use this to update an ENT incident

*/
type UpdateENTIncident struct {
	Context *middleware.Context
	Handler UpdateENTIncidentHandler
}

func (o *UpdateENTIncident) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUpdateENTIncidentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
