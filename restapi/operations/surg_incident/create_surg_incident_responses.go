// Code generated by go-swagger; DO NOT EDIT.

package surg_incident

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/gircapp/api/models"
)

// CreateSurgIncidentOKCode is the HTTP code returned for type CreateSurgIncidentOK
const CreateSurgIncidentOKCode int = 200

/*CreateSurgIncidentOK successful operation

swagger:response createSurgIncidentOK
*/
type CreateSurgIncidentOK struct {

	/*
	  In: Body
	*/
	Payload *models.DeleteIncidentGoodResponse `json:"body,omitempty"`
}

// NewCreateSurgIncidentOK creates CreateSurgIncidentOK with default headers values
func NewCreateSurgIncidentOK() *CreateSurgIncidentOK {

	return &CreateSurgIncidentOK{}
}

// WithPayload adds the payload to the create surg incident o k response
func (o *CreateSurgIncidentOK) WithPayload(payload *models.DeleteIncidentGoodResponse) *CreateSurgIncidentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create surg incident o k response
func (o *CreateSurgIncidentOK) SetPayload(payload *models.DeleteIncidentGoodResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateSurgIncidentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateSurgIncidentUnauthorizedCode is the HTTP code returned for type CreateSurgIncidentUnauthorized
const CreateSurgIncidentUnauthorizedCode int = 401

/*CreateSurgIncidentUnauthorized bad authorization token

swagger:response createSurgIncidentUnauthorized
*/
type CreateSurgIncidentUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.BadResponse `json:"body,omitempty"`
}

// NewCreateSurgIncidentUnauthorized creates CreateSurgIncidentUnauthorized with default headers values
func NewCreateSurgIncidentUnauthorized() *CreateSurgIncidentUnauthorized {

	return &CreateSurgIncidentUnauthorized{}
}

// WithPayload adds the payload to the create surg incident unauthorized response
func (o *CreateSurgIncidentUnauthorized) WithPayload(payload *models.BadResponse) *CreateSurgIncidentUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create surg incident unauthorized response
func (o *CreateSurgIncidentUnauthorized) SetPayload(payload *models.BadResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateSurgIncidentUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateSurgIncidentNotFoundCode is the HTTP code returned for type CreateSurgIncidentNotFound
const CreateSurgIncidentNotFoundCode int = 404

/*CreateSurgIncidentNotFound incident not found

swagger:response createSurgIncidentNotFound
*/
type CreateSurgIncidentNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.BadResponse `json:"body,omitempty"`
}

// NewCreateSurgIncidentNotFound creates CreateSurgIncidentNotFound with default headers values
func NewCreateSurgIncidentNotFound() *CreateSurgIncidentNotFound {

	return &CreateSurgIncidentNotFound{}
}

// WithPayload adds the payload to the create surg incident not found response
func (o *CreateSurgIncidentNotFound) WithPayload(payload *models.BadResponse) *CreateSurgIncidentNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create surg incident not found response
func (o *CreateSurgIncidentNotFound) SetPayload(payload *models.BadResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateSurgIncidentNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
