// Code generated by go-swagger; DO NOT EDIT.

package verify

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/somersbmatthews/gircapp2/models"
)

// VerifyOKCode is the HTTP code returned for type VerifyOK
const VerifyOKCode int = 200

/*VerifyOK successful operation

swagger:response verifyOK
*/
type VerifyOK struct {

	/*
	  In: Body
	*/
	Payload *models.UpdateUserGoodResponse `json:"body,omitempty"`
}

// NewVerifyOK creates VerifyOK with default headers values
func NewVerifyOK() *VerifyOK {

	return &VerifyOK{}
}

// WithPayload adds the payload to the verify o k response
func (o *VerifyOK) WithPayload(payload *models.UpdateUserGoodResponse) *VerifyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the verify o k response
func (o *VerifyOK) SetPayload(payload *models.UpdateUserGoodResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VerifyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// VerifyNotFoundCode is the HTTP code returned for type VerifyNotFound
const VerifyNotFoundCode int = 404

/*VerifyNotFound userid not found

swagger:response verifyNotFound
*/
type VerifyNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.UpdateUserNotFoundResponse `json:"body,omitempty"`
}

// NewVerifyNotFound creates VerifyNotFound with default headers values
func NewVerifyNotFound() *VerifyNotFound {

	return &VerifyNotFound{}
}

// WithPayload adds the payload to the verify not found response
func (o *VerifyNotFound) WithPayload(payload *models.UpdateUserNotFoundResponse) *VerifyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the verify not found response
func (o *VerifyNotFound) SetPayload(payload *models.UpdateUserNotFoundResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *VerifyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
