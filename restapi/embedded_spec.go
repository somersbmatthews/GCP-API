// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is test server for GIRC app",
    "title": "GIRC App API",
    "version": "2.0.0"
  },
  "host": "TODO",
  "basePath": "/",
  "paths": {
    "/v2/user": {
      "get": {
        "description": "Get a user's information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get user's information.",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains firebase ID token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "object that contains userId of user you want to get",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetUserGoodResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/GetUserBadResponse"
            }
          }
        }
      },
      "post": {
        "description": "register a user with his information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "register a user",
        "operationId": "createUser",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains firebase ID token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "a user's information",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CreateUserGoodResponse"
            }
          },
          "400": {
            "description": "user not created",
            "schema": {
              "$ref": "#/definitions/CreateUserBadResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a user's info",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains firebase ID token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Only fields with non-empty strings are updated. If a field is not to be updated, set the value to equal an empty string",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UpdateUserGoodResponse"
            }
          },
          "400": {
            "description": "Invalid user supplied",
            "schema": {
              "$ref": "#/definitions/UpdateUserInvalidResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/UpdateUserNotFoundResponse"
            }
          }
        }
      }
    },
    "/v2/verify": {
      "patch": {
        "description": "verified field is true to verify, false to unverify",
        "produces": [
          "application/json"
        ],
        "tags": [
          "verify"
        ],
        "summary": "used for testing, use this to verify or unverify a user",
        "operationId": "verify",
        "parameters": [
          {
            "description": "verified field is true to verify, false to unverify",
            "name": "verified",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Verify"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UpdateUserGoodResponse"
            }
          },
          "404": {
            "description": "userid not found",
            "schema": {
              "$ref": "#/definitions/UpdateUserNotFoundResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CreateUser": {
      "type": "object",
      "required": [
        "userId",
        "name",
        "email",
        "degree",
        "speciality"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "CreateUserBadResponse": {
      "type": "object",
      "required": [
        "created",
        "name",
        "email",
        "speciality",
        "degree"
      ],
      "properties": {
        "created": {
          "type": "boolean",
          "example": false
        },
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        }
      }
    },
    "CreateUserGoodResponse": {
      "type": "object",
      "required": [
        "created"
      ],
      "properties": {
        "created": {
          "type": "boolean"
        },
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "GetUser": {
      "type": "object",
      "required": [
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string"
        }
      }
    },
    "GetUserBadResponse": {
      "type": "object"
    },
    "GetUserGoodResponse": {
      "type": "object",
      "required": [
        "userId",
        "verified",
        "name",
        "degree",
        "speciality",
        "email"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "UpdateUser": {
      "type": "object",
      "required": [
        "userId"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "UpdateUserGoodResponse": {
      "type": "object",
      "required": [
        "userId",
        "verified",
        "name",
        "degree",
        "updated",
        "email",
        "speciality"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        },
        "updated": {
          "type": "boolean"
        },
        "userId": {
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "UpdateUserInvalidResponse": {
      "type": "object",
      "required": [
        "verified",
        "name",
        "degree",
        "speciality",
        "updated",
        "email"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        },
        "updated": {
          "type": "boolean",
          "example": false
        },
        "verified": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "UpdateUserNotFoundResponse": {
      "type": "object",
      "required": [
        "userId"
      ],
      "properties": {
        "updated": {
          "type": "boolean",
          "default": false
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "Verify": {
      "type": "object",
      "required": [
        "userId",
        "verified"
      ],
      "properties": {
        "userId": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      }
    }
  },
  "tags": [
    {
      "description": "to create, update, and delete incidents",
      "name": "incident"
    },
    {
      "description": "for user registration and authentication",
      "name": "user"
    },
    {
      "description": "only used for testing and will be removed in production",
      "name": "verify"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is test server for GIRC app",
    "title": "GIRC App API",
    "version": "2.0.0"
  },
  "host": "TODO",
  "basePath": "/",
  "paths": {
    "/v2/user": {
      "get": {
        "description": "Get a user's information.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get user's information.",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains firebase ID token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "object that contains userId of user you want to get",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetUserGoodResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/GetUserBadResponse"
            }
          }
        }
      },
      "post": {
        "description": "register a user with his information",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "register a user",
        "operationId": "createUser",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains firebase ID token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "a user's information",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CreateUserGoodResponse"
            }
          },
          "400": {
            "description": "user not created",
            "schema": {
              "$ref": "#/definitions/CreateUserBadResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a user's info",
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains firebase ID token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Only fields with non-empty strings are updated. If a field is not to be updated, set the value to equal an empty string",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UpdateUserGoodResponse"
            }
          },
          "400": {
            "description": "Invalid user supplied",
            "schema": {
              "$ref": "#/definitions/UpdateUserInvalidResponse"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/UpdateUserNotFoundResponse"
            }
          }
        }
      }
    },
    "/v2/verify": {
      "patch": {
        "description": "verified field is true to verify, false to unverify",
        "produces": [
          "application/json"
        ],
        "tags": [
          "verify"
        ],
        "summary": "used for testing, use this to verify or unverify a user",
        "operationId": "verify",
        "parameters": [
          {
            "description": "verified field is true to verify, false to unverify",
            "name": "verified",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Verify"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/UpdateUserGoodResponse"
            }
          },
          "404": {
            "description": "userid not found",
            "schema": {
              "$ref": "#/definitions/UpdateUserNotFoundResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CreateUser": {
      "type": "object",
      "required": [
        "userId",
        "name",
        "email",
        "degree",
        "speciality"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "CreateUserBadResponse": {
      "type": "object",
      "required": [
        "created",
        "name",
        "email",
        "speciality",
        "degree"
      ],
      "properties": {
        "created": {
          "type": "boolean",
          "example": false
        },
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        }
      }
    },
    "CreateUserGoodResponse": {
      "type": "object",
      "required": [
        "created"
      ],
      "properties": {
        "created": {
          "type": "boolean"
        },
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "GetUser": {
      "type": "object",
      "required": [
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string"
        }
      }
    },
    "GetUserBadResponse": {
      "type": "object"
    },
    "GetUserGoodResponse": {
      "type": "object",
      "required": [
        "userId",
        "verified",
        "name",
        "degree",
        "speciality",
        "email"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "UpdateUser": {
      "type": "object",
      "required": [
        "userId"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "UpdateUserGoodResponse": {
      "type": "object",
      "required": [
        "userId",
        "verified",
        "name",
        "degree",
        "updated",
        "email",
        "speciality"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        },
        "updated": {
          "type": "boolean"
        },
        "userId": {
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "UpdateUserInvalidResponse": {
      "type": "object",
      "required": [
        "verified",
        "name",
        "degree",
        "speciality",
        "updated",
        "email"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "speciality": {
          "type": "string"
        },
        "updated": {
          "type": "boolean",
          "example": false
        },
        "verified": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "UpdateUserNotFoundResponse": {
      "type": "object",
      "required": [
        "userId"
      ],
      "properties": {
        "updated": {
          "type": "boolean",
          "default": false
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "Verify": {
      "type": "object",
      "required": [
        "userId",
        "verified"
      ],
      "properties": {
        "userId": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      }
    }
  },
  "tags": [
    {
      "description": "to create, update, and delete incidents",
      "name": "incident"
    },
    {
      "description": "for user registration and authentication",
      "name": "user"
    },
    {
      "description": "only used for testing and will be removed in production",
      "name": "verify"
    }
  ]
}`))
}
