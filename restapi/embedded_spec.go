// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is test server for GIRC app",
    "title": "GIRC App API",
    "version": "3.0.0"
  },
  "host": "girc.app",
  "basePath": "/",
  "paths": {
    "/v2/incident": {
      "get": {
        "description": "Use this to get all incidents created by a user. incidents are listed in array in order from newest to oldest created",
        "produces": [
          "application/json"
        ],
        "tags": [
          "incident"
        ],
        "summary": "Get incidents",
        "operationId": "getIncidents",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "contains user id",
            "name": "User",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetIncidentsGoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "userid not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "post": {
        "description": "use this to create an incident for a userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "incident"
        ],
        "summary": "Create an incident",
        "operationId": "createIncident",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains firebase Id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateIncidents"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation, only returns token if not using OAuth",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "userId for this incident is not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Use this to delete an incident by incidentId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "incident"
        ],
        "summary": "Delete incident",
        "operationId": "deleteIncidents",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "contains user id",
            "name": "User",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v2/user": {
      "get": {
        "description": "Get a user's information.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get user's information.",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetUserGoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "post": {
        "description": "register a user with his information",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "register a user",
        "operationId": "createUser",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "a user's information",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "400": {
            "description": "database error while creating user",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "delete": {
        "description": "deletes a user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "unregisters a user, for testing only will be removed in production",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "authorization token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "contains user id",
            "name": "User",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "user with requested userid not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/admin/ban": {
      "patch": {
        "description": "Use this to ban a medical expert.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin"
        ],
        "summary": "Ban Medical Expert",
        "operationId": "banMedicalExpert",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header Firebase id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "FCMToken",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FCMToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/admin/sendnotification": {
      "post": {
        "description": "use this to send notification to a medical expert with id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin"
        ],
        "summary": "send notification to medical expert",
        "operationId": "sendNotification",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header Firebase id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/admin/verifyexpert": {
      "patch": {
        "description": "use this to director verify an expert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin"
        ],
        "summary": "Register a Medical Expert",
        "operationId": "verifyExpert",
        "parameters": [
          {
            "type": "string",
            "description": "Firebase Id token goes here",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token"
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/entincident": {
      "get": {
        "description": "use this to get all of a users entIncidents",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ENT Incident"
        ],
        "summary": "get all medical experts entincidents",
        "operationId": "getENTIncidents",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains firebase id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetENTIncidentsGoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "put": {
        "description": "Use this to update an ENT incident",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ENT Incident"
        ],
        "summary": "update ENT Incident",
        "operationId": "updateENTIncident",
        "parameters": [
          {
            "type": "string",
            "description": "firebase id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ENTIncident"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "post": {
        "description": "Use this to delete an incident by incidentId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ENT Incident"
        ],
        "summary": "create ENT Incident",
        "operationId": "createENTIncident",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ENTIncident"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Use this to delete an ENT incident",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ENT Incident"
        ],
        "summary": "Delete ENT Incident",
        "operationId": "deleteENTIncident",
        "parameters": [
          {
            "type": "string",
            "description": "firebase id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteENTIncident"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/expert": {
      "get": {
        "description": "Use this to register a expert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "register expert",
        "operationId": "getExpert",
        "parameters": [
          {
            "type": "string",
            "description": "if using google oauth, set that token here",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetExpertResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "post": {
        "description": "Use this to register a expert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "register expert",
        "operationId": "registerExpert",
        "parameters": [
          {
            "type": "string",
            "description": "if using google oauth, set that token here",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "expert",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Expert"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Use this to register a expert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "register expert",
        "operationId": "deleteExpert",
        "parameters": [
          {
            "type": "string",
            "description": "if using google oauth, set that token here",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Use this to register a expert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "register expert",
        "operationId": "updateExpert",
        "parameters": [
          {
            "type": "string",
            "description": "if using google oauth, set that token here",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "expert",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Expert"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/expert/logout": {
      "get": {
        "description": "Use this to login an expert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "login expert",
        "operationId": "logoutExpert",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header Firebase id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/expert/register": {
      "post": {
        "description": "use this to register/create a user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "Register a Medical Expert",
        "operationId": "createExpert",
        "parameters": [
          {
            "type": "string",
            "description": "Firebase Id token goes here",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "expert",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Expert"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "userId for this incident is not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/expert/updatefcmtoken": {
      "patch": {
        "description": "use this to update FCM token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "Update FCM Token",
        "operationId": "updateFCMtoken",
        "parameters": [
          {
            "type": "string",
            "description": "Firebase Id token goes here",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "FCMToken",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FCMToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/swallowedObject": {
      "delete": {
        "description": "use this to delete swallowed object",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Swallowed Object"
        ],
        "summary": "Delete Swallowed Object",
        "operationId": "deleteSwallowedObject",
        "parameters": [
          {
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteSwallowedObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BadResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Ban": {
      "type": "object",
      "required": [
        "banned",
        "userId"
      ],
      "properties": {
        "banned": {
          "type": "boolean"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "CreateIncidents": {
      "type": "object",
      "properties": {
        "incidents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Incident"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "CreateUser": {
      "type": "object",
      "required": [
        "id",
        "name",
        "email",
        "degree",
        "specialty"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "specialty": {
          "type": "string"
        }
      }
    },
    "DeleteENTIncident": {
      "type": "object",
      "required": [
        "ENTIncidentID"
      ],
      "properties": {
        "ENTIncidentID": {
          "type": "string"
        }
      }
    },
    "DeleteIncident": {
      "type": "object",
      "required": [
        "ID"
      ],
      "properties": {
        "ID": {
          "type": "string"
        }
      }
    },
    "DeleteIncidentGoodResponse": {
      "type": "object",
      "required": [
        "ID"
      ],
      "properties": {
        "Deleted": {
          "type": "boolean",
          "default": true
        },
        "ID": {
          "type": "string"
        }
      }
    },
    "DeleteIncidentIncidentIdNotFoundResponse": {
      "type": "object",
      "required": [
        "ID"
      ],
      "properties": {
        "Deleted": {
          "type": "boolean",
          "default": true
        },
        "ID": {
          "type": "string"
        }
      }
    },
    "DeleteIncidents": {
      "type": "object",
      "required": [
        "userID"
      ],
      "properties": {
        "userID": {
          "type": "string"
        }
      }
    },
    "DeleteSwallowedObject": {
      "type": "object",
      "required": [
        "SwallowedObjectID"
      ],
      "properties": {
        "SwallowedObjectID": {
          "type": "string"
        }
      }
    },
    "ENTIncident": {
      "type": "object",
      "required": [
        "ID",
        "country",
        "year",
        "ageYears",
        "ageMonths",
        "gender",
        "incidentDescription",
        "daysUntilRemoval",
        "hoursUntilRemoval",
        "minutesUntilRemoval",
        "removalStrategy",
        "openSurgery",
        "easeOfRemoval",
        "wasIncidentLifeThreatening",
        "symptoms",
        "customSymptoms",
        "symptomSeverity",
        "complications",
        "customComplications",
        "anesthesia",
        "prognosis",
        "hospitalStay",
        "deviceType",
        "swallowedObjects"
      ],
      "properties": {
        "ID": {
          "type": "string"
        },
        "ageMonths": {
          "type": "string"
        },
        "ageYears": {
          "type": "string"
        },
        "anesthesia": {
          "type": "string"
        },
        "complications": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "country": {
          "type": "string"
        },
        "customComplications": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customSymptoms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "daysUntilRemoval": {
          "type": "integer"
        },
        "deviceType": {
          "type": "string"
        },
        "easeOfRemoval": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "hospitalStay": {
          "type": "string"
        },
        "hoursUntilRemoval": {
          "type": "integer"
        },
        "incidentDescription": {
          "type": "string"
        },
        "minutesUntilRemoval": {
          "type": "integer"
        },
        "openSurgery": {
          "type": "string"
        },
        "prognosis": {
          "type": "string"
        },
        "removalStrategy": {
          "type": "string"
        },
        "submitted": {
          "type": "boolean"
        },
        "swallowedObjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SwallowedObject"
          }
        },
        "symptomSeverity": {
          "type": "string"
        },
        "symptoms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "wasIncidentLifeThreatening": {
          "type": "string"
        },
        "year": {
          "type": "string"
        }
      }
    },
    "Expert": {
      "type": "object",
      "required": [
        "name",
        "email",
        "expertise",
        "degree",
        "deviceType",
        "FCMToken"
      ],
      "properties": {
        "FCMToken": {
          "type": "string"
        },
        "degree": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "expertise": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "FCMToken": {
      "type": "object",
      "required": [
        "FCMToken"
      ],
      "properties": {
        "FCMToken": {
          "type": "string"
        }
      }
    },
    "GetENTIncidentsGoodResponse": {
      "type": "object",
      "properties": {
        "incidents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ENTIncident"
          }
        }
      }
    },
    "GetExpertResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "email",
        "expertise",
        "degree",
        "verified",
        "emailConfirmed",
        "banned"
      ],
      "properties": {
        "banned": {
          "type": "boolean"
        },
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "emailConfirmed": {
          "type": "boolean",
          "example": false
        },
        "expertise": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      }
    },
    "GetIncidentsGoodResponse": {
      "type": "object",
      "required": [
        "userId"
      ],
      "properties": {
        "incidents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Incident"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "GetUserGoodResponse": {
      "type": "object",
      "required": [
        "userId",
        "verified",
        "name",
        "degree",
        "expertise",
        "email"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "emailConfirmed": {
          "type": "boolean",
          "example": false
        },
        "expertise": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "GoodResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Incident": {
      "type": "object",
      "properties": {
        "aceticAcid": {
          "type": "string"
        },
        "additionalImagingAndSurgery": {
          "type": "string"
        },
        "anesthesia": {
          "type": "string"
        },
        "anteriorPhoto": {
          "type": "string"
        },
        "batteryImprintCode": {
          "type": "string"
        },
        "batteryLocation": {
          "type": "string"
        },
        "complications": {
          "type": "string"
        },
        "customMagnetType": {
          "type": "string"
        },
        "dimensionality": {
          "type": "string"
        },
        "easeOfRemoval": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "honey": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "incidentDescription": {
          "type": "string"
        },
        "incidentYear": {
          "type": "string"
        },
        "largestDepth": {
          "type": "string"
        },
        "largestLength": {
          "type": "string"
        },
        "largestWidth": {
          "type": "string"
        },
        "lateralPhoto": {
          "type": "string"
        },
        "lengthOfHospitalStay": {
          "type": "string"
        },
        "lifeThreatening": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "locationOfObjects": {
          "type": "string"
        },
        "longTermPrognosis": {
          "type": "string"
        },
        "magnetType": {
          "type": "string"
        },
        "magneticPoleDirection": {
          "type": "string"
        },
        "numberOfObjects": {
          "type": "string"
        },
        "numberOfPieces": {
          "type": "string"
        },
        "objectBasicShape": {
          "type": "string"
        },
        "objectCharacteristics": {
          "type": "string"
        },
        "objectConsistency": {
          "type": "string"
        },
        "objectMaterial": {
          "type": "string"
        },
        "objectsIntact": {
          "type": "string"
        },
        "other": {
          "type": "string"
        },
        "otherShape": {
          "type": "string"
        },
        "patientAge": {
          "type": "string"
        },
        "posteriorPhoto": {
          "type": "string"
        },
        "removalStrategy": {
          "type": "string"
        },
        "settingOfRemoval": {
          "type": "string"
        },
        "sucralfate": {
          "type": "string"
        },
        "symptomSeverity": {
          "type": "string"
        },
        "symptomsPresent": {
          "type": "string"
        },
        "timeUntilRemoval": {
          "type": "string"
        },
        "xrayOpacity": {
          "type": "string"
        }
      }
    },
    "Notification": {
      "type": "object",
      "required": [
        "userId",
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "SwallowedObject": {
      "type": "object",
      "required": [
        "ID",
        "radioOpacity",
        "imaging",
        "anteriorPhoto",
        "posteriorPhoto",
        "lateralPhoto",
        "anteriorLongestLength",
        "posteriorLongestLength",
        "lateralLongestLength",
        "objectLocation",
        "numberOfThisObject",
        "objectIntact",
        "numberOfPieces",
        "objectDescription",
        "objectShape",
        "objectCustomShape",
        "objectDimensionality",
        "otherCharacteristics",
        "material",
        "customMaterial",
        "isBatteryOrMagnet",
        "batteryType",
        "customBatteryType",
        "batteryImprintCode",
        "mitigatingFeatures",
        "customMitigatingFeatures",
        "negativePoleDirection",
        "honey",
        "sucralfate",
        "aceticAcid",
        "magnetType",
        "customMagnetType",
        "deviceType"
      ],
      "properties": {
        "ID": {
          "type": "string"
        },
        "aceticAcid": {
          "type": "string"
        },
        "anteriorLongestLength": {
          "type": "string"
        },
        "anteriorPhoto": {
          "type": "string"
        },
        "batteryImprintCode": {
          "type": "string"
        },
        "batteryType": {
          "type": "string"
        },
        "customBatteryType": {
          "type": "string"
        },
        "customMagnetType": {
          "type": "string"
        },
        "customMaterial": {
          "type": "string"
        },
        "customMitigatingFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deviceType": {
          "type": "string"
        },
        "honey": {
          "type": "string"
        },
        "imaging": {
          "type": "string"
        },
        "incidentID": {
          "type": "string"
        },
        "isBatteryOrMagnet": {
          "type": "string"
        },
        "lateralLongestLength": {
          "type": "string"
        },
        "lateralPhoto": {
          "type": "string"
        },
        "magnetType": {
          "type": "string"
        },
        "material": {
          "type": "string"
        },
        "mitigatingFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "negativePoleDirection": {
          "type": "string"
        },
        "numberOfPieces": {
          "type": "string"
        },
        "numberOfThisObject": {
          "type": "string"
        },
        "objectCustomShape": {
          "type": "string"
        },
        "objectDescription": {
          "type": "string"
        },
        "objectDimensionality": {
          "type": "string"
        },
        "objectIntact": {
          "type": "string"
        },
        "objectLocation": {
          "type": "string"
        },
        "objectShape": {
          "type": "string"
        },
        "otherCharacteristics": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "posteriorLongestLength": {
          "type": "string"
        },
        "posteriorPhoto": {
          "type": "string"
        },
        "radioOpacity": {
          "type": "string"
        },
        "submitted": {
          "type": "boolean"
        },
        "sucralfate": {
          "type": "string"
        }
      }
    },
    "Verify": {
      "type": "object",
      "required": [
        "verified",
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      }
    }
  },
  "tags": [
    {
      "description": "to create, update, and delete incidents using old app",
      "name": "incident"
    },
    {
      "description": "for user registration and authentication",
      "name": "user"
    },
    {
      "description": "only used for testing and will be removed in production",
      "name": "verify"
    },
    {
      "description": "for Medical Experts",
      "name": "Medical Expert"
    },
    {
      "description": "for Otolaryngology Incidents",
      "name": "ENT Incident"
    },
    {
      "description": "for Vet Incidents",
      "name": "Vet Incident"
    },
    {
      "description": "for admin app operations",
      "name": "Admin"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is test server for GIRC app",
    "title": "GIRC App API",
    "version": "3.0.0"
  },
  "host": "girc.app",
  "basePath": "/",
  "paths": {
    "/v2/incident": {
      "get": {
        "description": "Use this to get all incidents created by a user. incidents are listed in array in order from newest to oldest created",
        "produces": [
          "application/json"
        ],
        "tags": [
          "incident"
        ],
        "summary": "Get incidents",
        "operationId": "getIncidents",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "contains user id",
            "name": "User",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetIncidentsGoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "userid not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "post": {
        "description": "use this to create an incident for a userId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "incident"
        ],
        "summary": "Create an incident",
        "operationId": "createIncident",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains firebase Id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateIncidents"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation, only returns token if not using OAuth",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "userId for this incident is not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Use this to delete an incident by incidentId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "incident"
        ],
        "summary": "Delete incident",
        "operationId": "deleteIncidents",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "contains user id",
            "name": "User",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v2/user": {
      "get": {
        "description": "Get a user's information.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get user's information.",
        "operationId": "getUser",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetUserGoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "post": {
        "description": "register a user with his information",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "register a user",
        "operationId": "createUser",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "a user's information",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "400": {
            "description": "database error while creating user",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "delete": {
        "description": "deletes a user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "unregisters a user, for testing only will be removed in production",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "authorization token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "contains user id",
            "name": "User",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "user with requested userid not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/admin/ban": {
      "patch": {
        "description": "Use this to ban a medical expert.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin"
        ],
        "summary": "Ban Medical Expert",
        "operationId": "banMedicalExpert",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header Firebase id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "FCMToken",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FCMToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/admin/sendnotification": {
      "post": {
        "description": "use this to send notification to a medical expert with id",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin"
        ],
        "summary": "send notification to medical expert",
        "operationId": "sendNotification",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header Firebase id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/admin/verifyexpert": {
      "patch": {
        "description": "use this to director verify an expert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Admin"
        ],
        "summary": "Register a Medical Expert",
        "operationId": "verifyExpert",
        "parameters": [
          {
            "type": "string",
            "description": "Firebase Id token goes here",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token"
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/entincident": {
      "get": {
        "description": "use this to get all of a users entIncidents",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ENT Incident"
        ],
        "summary": "get all medical experts entincidents",
        "operationId": "getENTIncidents",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains firebase id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetENTIncidentsGoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "put": {
        "description": "Use this to update an ENT incident",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ENT Incident"
        ],
        "summary": "update ENT Incident",
        "operationId": "updateENTIncident",
        "parameters": [
          {
            "type": "string",
            "description": "firebase id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ENTIncident"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "post": {
        "description": "Use this to delete an incident by incidentId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ENT Incident"
        ],
        "summary": "create ENT Incident",
        "operationId": "createENTIncident",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header contains bearer token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ENTIncident"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Use this to delete an ENT incident",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "ENT Incident"
        ],
        "summary": "Delete ENT Incident",
        "operationId": "deleteENTIncident",
        "parameters": [
          {
            "type": "string",
            "description": "firebase id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteENTIncident"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/expert": {
      "get": {
        "description": "Use this to register a expert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "register expert",
        "operationId": "getExpert",
        "parameters": [
          {
            "type": "string",
            "description": "if using google oauth, set that token here",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetExpertResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "post": {
        "description": "Use this to register a expert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "register expert",
        "operationId": "registerExpert",
        "parameters": [
          {
            "type": "string",
            "description": "if using google oauth, set that token here",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "expert",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Expert"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Use this to register a expert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "register expert",
        "operationId": "deleteExpert",
        "parameters": [
          {
            "type": "string",
            "description": "if using google oauth, set that token here",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Use this to register a expert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "register expert",
        "operationId": "updateExpert",
        "parameters": [
          {
            "type": "string",
            "description": "if using google oauth, set that token here",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "expert",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Expert"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/expert/logout": {
      "get": {
        "description": "Use this to login an expert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "login expert",
        "operationId": "logoutExpert",
        "parameters": [
          {
            "type": "string",
            "description": "authorization header Firebase id token",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/expert/register": {
      "post": {
        "description": "use this to register/create a user",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "Register a Medical Expert",
        "operationId": "createExpert",
        "parameters": [
          {
            "type": "string",
            "description": "Firebase Id token goes here",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "expert",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Expert"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "userId for this incident is not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/expert/updatefcmtoken": {
      "patch": {
        "description": "use this to update FCM token",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Medical Expert"
        ],
        "summary": "Update FCM Token",
        "operationId": "updateFCMtoken",
        "parameters": [
          {
            "type": "string",
            "description": "Firebase Id token goes here",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "name": "FCMToken",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FCMToken"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "user not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    },
    "/v3/swallowedObject": {
      "delete": {
        "description": "use this to delete swallowed object",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Swallowed Object"
        ],
        "summary": "Delete Swallowed Object",
        "operationId": "deleteSwallowedObject",
        "parameters": [
          {
            "name": "incident",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteSwallowedObject"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GoodResponse"
            }
          },
          "401": {
            "description": "bad authorization token",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          },
          "404": {
            "description": "incident not found",
            "schema": {
              "$ref": "#/definitions/BadResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BadResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Ban": {
      "type": "object",
      "required": [
        "banned",
        "userId"
      ],
      "properties": {
        "banned": {
          "type": "boolean"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "CreateIncidents": {
      "type": "object",
      "properties": {
        "incidents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Incident"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "CreateUser": {
      "type": "object",
      "required": [
        "id",
        "name",
        "email",
        "degree",
        "specialty"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "specialty": {
          "type": "string"
        }
      }
    },
    "DeleteENTIncident": {
      "type": "object",
      "required": [
        "ENTIncidentID"
      ],
      "properties": {
        "ENTIncidentID": {
          "type": "string"
        }
      }
    },
    "DeleteIncident": {
      "type": "object",
      "required": [
        "ID"
      ],
      "properties": {
        "ID": {
          "type": "string"
        }
      }
    },
    "DeleteIncidentGoodResponse": {
      "type": "object",
      "required": [
        "ID"
      ],
      "properties": {
        "Deleted": {
          "type": "boolean",
          "default": true
        },
        "ID": {
          "type": "string"
        }
      }
    },
    "DeleteIncidentIncidentIdNotFoundResponse": {
      "type": "object",
      "required": [
        "ID"
      ],
      "properties": {
        "Deleted": {
          "type": "boolean",
          "default": true
        },
        "ID": {
          "type": "string"
        }
      }
    },
    "DeleteIncidents": {
      "type": "object",
      "required": [
        "userID"
      ],
      "properties": {
        "userID": {
          "type": "string"
        }
      }
    },
    "DeleteSwallowedObject": {
      "type": "object",
      "required": [
        "SwallowedObjectID"
      ],
      "properties": {
        "SwallowedObjectID": {
          "type": "string"
        }
      }
    },
    "ENTIncident": {
      "type": "object",
      "required": [
        "ID",
        "country",
        "year",
        "ageYears",
        "ageMonths",
        "gender",
        "incidentDescription",
        "daysUntilRemoval",
        "hoursUntilRemoval",
        "minutesUntilRemoval",
        "removalStrategy",
        "openSurgery",
        "easeOfRemoval",
        "wasIncidentLifeThreatening",
        "symptoms",
        "customSymptoms",
        "symptomSeverity",
        "complications",
        "customComplications",
        "anesthesia",
        "prognosis",
        "hospitalStay",
        "deviceType",
        "swallowedObjects"
      ],
      "properties": {
        "ID": {
          "type": "string"
        },
        "ageMonths": {
          "type": "string"
        },
        "ageYears": {
          "type": "string"
        },
        "anesthesia": {
          "type": "string"
        },
        "complications": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "country": {
          "type": "string"
        },
        "customComplications": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customSymptoms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "daysUntilRemoval": {
          "type": "integer"
        },
        "deviceType": {
          "type": "string"
        },
        "easeOfRemoval": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "hospitalStay": {
          "type": "string"
        },
        "hoursUntilRemoval": {
          "type": "integer"
        },
        "incidentDescription": {
          "type": "string"
        },
        "minutesUntilRemoval": {
          "type": "integer"
        },
        "openSurgery": {
          "type": "string"
        },
        "prognosis": {
          "type": "string"
        },
        "removalStrategy": {
          "type": "string"
        },
        "submitted": {
          "type": "boolean"
        },
        "swallowedObjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SwallowedObject"
          }
        },
        "symptomSeverity": {
          "type": "string"
        },
        "symptoms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "wasIncidentLifeThreatening": {
          "type": "string"
        },
        "year": {
          "type": "string"
        }
      }
    },
    "Expert": {
      "type": "object",
      "required": [
        "name",
        "email",
        "expertise",
        "degree",
        "deviceType",
        "FCMToken"
      ],
      "properties": {
        "FCMToken": {
          "type": "string"
        },
        "degree": {
          "type": "string"
        },
        "deviceType": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "expertise": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "FCMToken": {
      "type": "object",
      "required": [
        "FCMToken"
      ],
      "properties": {
        "FCMToken": {
          "type": "string"
        }
      }
    },
    "GetENTIncidentsGoodResponse": {
      "type": "object",
      "properties": {
        "incidents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ENTIncident"
          }
        }
      }
    },
    "GetExpertResponse": {
      "type": "object",
      "required": [
        "id",
        "name",
        "email",
        "expertise",
        "degree",
        "verified",
        "emailConfirmed",
        "banned"
      ],
      "properties": {
        "banned": {
          "type": "boolean"
        },
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "emailConfirmed": {
          "type": "boolean",
          "example": false
        },
        "expertise": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      }
    },
    "GetIncidentsGoodResponse": {
      "type": "object",
      "required": [
        "userId"
      ],
      "properties": {
        "incidents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Incident"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "GetUserGoodResponse": {
      "type": "object",
      "required": [
        "userId",
        "verified",
        "name",
        "degree",
        "expertise",
        "email"
      ],
      "properties": {
        "degree": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "emailConfirmed": {
          "type": "boolean",
          "example": false
        },
        "expertise": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "verified": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "GoodResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Incident": {
      "type": "object",
      "properties": {
        "aceticAcid": {
          "type": "string"
        },
        "additionalImagingAndSurgery": {
          "type": "string"
        },
        "anesthesia": {
          "type": "string"
        },
        "anteriorPhoto": {
          "type": "string"
        },
        "batteryImprintCode": {
          "type": "string"
        },
        "batteryLocation": {
          "type": "string"
        },
        "complications": {
          "type": "string"
        },
        "customMagnetType": {
          "type": "string"
        },
        "dimensionality": {
          "type": "string"
        },
        "easeOfRemoval": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "honey": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "incidentDescription": {
          "type": "string"
        },
        "incidentYear": {
          "type": "string"
        },
        "largestDepth": {
          "type": "string"
        },
        "largestLength": {
          "type": "string"
        },
        "largestWidth": {
          "type": "string"
        },
        "lateralPhoto": {
          "type": "string"
        },
        "lengthOfHospitalStay": {
          "type": "string"
        },
        "lifeThreatening": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "locationOfObjects": {
          "type": "string"
        },
        "longTermPrognosis": {
          "type": "string"
        },
        "magnetType": {
          "type": "string"
        },
        "magneticPoleDirection": {
          "type": "string"
        },
        "numberOfObjects": {
          "type": "string"
        },
        "numberOfPieces": {
          "type": "string"
        },
        "objectBasicShape": {
          "type": "string"
        },
        "objectCharacteristics": {
          "type": "string"
        },
        "objectConsistency": {
          "type": "string"
        },
        "objectMaterial": {
          "type": "string"
        },
        "objectsIntact": {
          "type": "string"
        },
        "other": {
          "type": "string"
        },
        "otherShape": {
          "type": "string"
        },
        "patientAge": {
          "type": "string"
        },
        "posteriorPhoto": {
          "type": "string"
        },
        "removalStrategy": {
          "type": "string"
        },
        "settingOfRemoval": {
          "type": "string"
        },
        "sucralfate": {
          "type": "string"
        },
        "symptomSeverity": {
          "type": "string"
        },
        "symptomsPresent": {
          "type": "string"
        },
        "timeUntilRemoval": {
          "type": "string"
        },
        "xrayOpacity": {
          "type": "string"
        }
      }
    },
    "Notification": {
      "type": "object",
      "required": [
        "userId",
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "SwallowedObject": {
      "type": "object",
      "required": [
        "ID",
        "radioOpacity",
        "imaging",
        "anteriorPhoto",
        "posteriorPhoto",
        "lateralPhoto",
        "anteriorLongestLength",
        "posteriorLongestLength",
        "lateralLongestLength",
        "objectLocation",
        "numberOfThisObject",
        "objectIntact",
        "numberOfPieces",
        "objectDescription",
        "objectShape",
        "objectCustomShape",
        "objectDimensionality",
        "otherCharacteristics",
        "material",
        "customMaterial",
        "isBatteryOrMagnet",
        "batteryType",
        "customBatteryType",
        "batteryImprintCode",
        "mitigatingFeatures",
        "customMitigatingFeatures",
        "negativePoleDirection",
        "honey",
        "sucralfate",
        "aceticAcid",
        "magnetType",
        "customMagnetType",
        "deviceType"
      ],
      "properties": {
        "ID": {
          "type": "string"
        },
        "aceticAcid": {
          "type": "string"
        },
        "anteriorLongestLength": {
          "type": "string"
        },
        "anteriorPhoto": {
          "type": "string"
        },
        "batteryImprintCode": {
          "type": "string"
        },
        "batteryType": {
          "type": "string"
        },
        "customBatteryType": {
          "type": "string"
        },
        "customMagnetType": {
          "type": "string"
        },
        "customMaterial": {
          "type": "string"
        },
        "customMitigatingFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deviceType": {
          "type": "string"
        },
        "honey": {
          "type": "string"
        },
        "imaging": {
          "type": "string"
        },
        "incidentID": {
          "type": "string"
        },
        "isBatteryOrMagnet": {
          "type": "string"
        },
        "lateralLongestLength": {
          "type": "string"
        },
        "lateralPhoto": {
          "type": "string"
        },
        "magnetType": {
          "type": "string"
        },
        "material": {
          "type": "string"
        },
        "mitigatingFeatures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "negativePoleDirection": {
          "type": "string"
        },
        "numberOfPieces": {
          "type": "string"
        },
        "numberOfThisObject": {
          "type": "string"
        },
        "objectCustomShape": {
          "type": "string"
        },
        "objectDescription": {
          "type": "string"
        },
        "objectDimensionality": {
          "type": "string"
        },
        "objectIntact": {
          "type": "string"
        },
        "objectLocation": {
          "type": "string"
        },
        "objectShape": {
          "type": "string"
        },
        "otherCharacteristics": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "posteriorLongestLength": {
          "type": "string"
        },
        "posteriorPhoto": {
          "type": "string"
        },
        "radioOpacity": {
          "type": "string"
        },
        "submitted": {
          "type": "boolean"
        },
        "sucralfate": {
          "type": "string"
        }
      }
    },
    "Verify": {
      "type": "object",
      "required": [
        "verified",
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      }
    }
  },
  "tags": [
    {
      "description": "to create, update, and delete incidents using old app",
      "name": "incident"
    },
    {
      "description": "for user registration and authentication",
      "name": "user"
    },
    {
      "description": "only used for testing and will be removed in production",
      "name": "verify"
    },
    {
      "description": "for Medical Experts",
      "name": "Medical Expert"
    },
    {
      "description": "for Otolaryngology Incidents",
      "name": "ENT Incident"
    },
    {
      "description": "for Vet Incidents",
      "name": "Vet Incident"
    },
    {
      "description": "for admin app operations",
      "name": "Admin"
    }
  ]
}`))
}
